
Final_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08006658  08006658  00007658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b0c  08006b0c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006b0c  08006b0c  00007b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b14  08006b14  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b14  08006b14  00007b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b18  08006b18  00007b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006b1c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000060  08006b7c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08006b7c  00008440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb3c  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd7  00000000  00000000  00016bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00018ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ace  00000000  00000000  00019968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178e5  00000000  00000000  0001a436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001014b  00000000  00000000  00031d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099a1c  00000000  00000000  00041e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe4  00000000  00000000  000db8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000df8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006640 	.word	0x08006640

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006640 	.word	0x08006640

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ADC_Select_CH>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rcv_intpt_flag = 0;
void ADC_Select_CH(int CH)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
ADC_ChannelConfTypeDef sConfig = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_4;
 8000596:	2304      	movs	r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800059a:	2301      	movs	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	@ (80005bc <ADC_Select_CH+0x3c>)
 80005a6:	f002 f883 	bl	80026b0 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <ADC_Select_CH+0x34>
	{
	Error_Handler();
 80005b0:	f001 fb72 	bl	8001c98 <Error_Handler>
	}
}
 80005b4:	bf00      	nop
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000f4 	.word	0x200000f4

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b096      	sub	sp, #88	@ 0x58
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f001 fe3d 	bl	8002244 <HAL_Init>

  /* USER CODE BEGIN Init */

  int mode = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	657b      	str	r3, [r7, #84]	@ 0x54
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 fdc7 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f001 f821 	bl	8001618 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 ffcb 	bl	8001570 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005da:	f000 fe21 	bl	8001220 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005de:	f000 fe71 	bl	80012c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e2:	f000 fee5 	bl	80013b0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80005e6:	f000 ff99 	bl	800151c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005ea:	f000 ffeb 	bl	80015c4 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 80005ee:	f000 ff47 	bl	8001480 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim3);
 80005f2:	48b7      	ldr	r0, [pc, #732]	@ (80008d0 <main+0x310>)
 80005f4:	f003 fa9e 	bl	8003b34 <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	48b5      	ldr	r0, [pc, #724]	@ (80008d0 <main+0x310>)
 80005fc:	f003 fbf6 	bl	8003dec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000600:	2108      	movs	r1, #8
 8000602:	48b3      	ldr	r0, [pc, #716]	@ (80008d0 <main+0x310>)
 8000604:	f003 fbf2 	bl	8003dec <HAL_TIM_PWM_Start>
  TIM3->PSC = 15;
 8000608:	4bb2      	ldr	r3, [pc, #712]	@ (80008d4 <main+0x314>)
 800060a:	220f      	movs	r2, #15
 800060c:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM3->ARR = 2000;
 800060e:	4bb1      	ldr	r3, [pc, #708]	@ (80008d4 <main+0x314>)
 8000610:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000614:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM3->CCR1 = 0; //fwd
 8000616:	4baf      	ldr	r3, [pc, #700]	@ (80008d4 <main+0x314>)
 8000618:	2200      	movs	r2, #0
 800061a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR3 = 0; //bckwd
 800061c:	4bad      	ldr	r3, [pc, #692]	@ (80008d4 <main+0x314>)
 800061e:	2200      	movs	r2, #0
 8000620:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_TIM_Base_Start(&htim2);
 8000622:	48ad      	ldr	r0, [pc, #692]	@ (80008d8 <main+0x318>)
 8000624:	f003 fad6 	bl	8003bd4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000628:	2100      	movs	r1, #0
 800062a:	48ab      	ldr	r0, [pc, #684]	@ (80008d8 <main+0x318>)
 800062c:	f003 fbde 	bl	8003dec <HAL_TIM_PWM_Start>
  TIM2->PSC = 16-1;
 8000630:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000634:	220f      	movs	r2, #15
 8000636:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = 20000-1;
 8000638:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800063c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000640:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM2->CCR1 = 500;
 8000642:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000646:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800064a:	635a      	str	r2, [r3, #52]	@ 0x34
  int rpm_tick_start = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int timer_start = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	64bb      	str	r3, [r7, #72]	@ 0x48
  int on_off = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	653b      	str	r3, [r7, #80]	@ 0x50
  int input_array[8];
  uint8_t clock_inputs[9];
  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2120      	movs	r1, #32
 800065c:	489f      	ldr	r0, [pc, #636]	@ (80008dc <main+0x31c>)
 800065e:	f002 fd85 	bl	800316c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //user inputs for pipeplines 
	  if (mode == 0){
 8000662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000664:	2b00      	cmp	r3, #0
 8000666:	f040 8271 	bne.w	8000b4c <main+0x58c>

		  HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 800066a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066e:	2202      	movs	r2, #2
 8000670:	499b      	ldr	r1, [pc, #620]	@ (80008e0 <main+0x320>)
 8000672:	489c      	ldr	r0, [pc, #624]	@ (80008e4 <main+0x324>)
 8000674:	f004 fab6 	bl	8004be4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart6, "***SETUP MODE*** \r\n",strlen("***SETUP MODE*** \r\n"), 1000);
 8000678:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067c:	2213      	movs	r2, #19
 800067e:	499a      	ldr	r1, [pc, #616]	@ (80008e8 <main+0x328>)
 8000680:	4898      	ldr	r0, [pc, #608]	@ (80008e4 <main+0x324>)
 8000682:	f004 faaf 	bl	8004be4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart6, "ENTER SETUP PARAMETERS \r\n",strlen("ENTER SETUP PARAMETERS \r\n"), 1000);
 8000686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068a:	2219      	movs	r2, #25
 800068c:	4997      	ldr	r1, [pc, #604]	@ (80008ec <main+0x32c>)
 800068e:	4895      	ldr	r0, [pc, #596]	@ (80008e4 <main+0x324>)
 8000690:	f004 faa8 	bl	8004be4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart6, "FIRST PIPELINE CHOICE FOR CONNECTION:",strlen("FIRST PIPELINE CHOICE FOR CONNECTION:"), 1000);
 8000694:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000698:	2225      	movs	r2, #37	@ 0x25
 800069a:	4995      	ldr	r1, [pc, #596]	@ (80008f0 <main+0x330>)
 800069c:	4891      	ldr	r0, [pc, #580]	@ (80008e4 <main+0x324>)
 800069e:	f004 faa1 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 80006a2:	4b94      	ldr	r3, [pc, #592]	@ (80008f4 <main+0x334>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	4993      	ldr	r1, [pc, #588]	@ (80008f8 <main+0x338>)
 80006ac:	488d      	ldr	r0, [pc, #564]	@ (80008e4 <main+0x324>)
 80006ae:	f004 fb24 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 80006b2:	bf00      	nop
 80006b4:	4b8f      	ldr	r3, [pc, #572]	@ (80008f4 <main+0x334>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0fb      	beq.n	80006b4 <main+0xf4>
			input_array[0] = atoi((char*)rx_buffer);
 80006bc:	488f      	ldr	r0, [pc, #572]	@ (80008fc <main+0x33c>)
 80006be:	f005 fa97 	bl	8005bf0 <atoi>
 80006c2:	4603      	mov	r3, r0
 80006c4:	617b      	str	r3, [r7, #20]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 80006c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ca:	2202      	movs	r2, #2
 80006cc:	4984      	ldr	r1, [pc, #528]	@ (80008e0 <main+0x320>)
 80006ce:	4885      	ldr	r0, [pc, #532]	@ (80008e4 <main+0x324>)
 80006d0:	f004 fa88 	bl	8004be4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart6, "FIRST PIPELINE CHOICE FOR MOTOR PWM:",strlen("FIRST PIPELINE CHOICE FOR MOTOR PWM:"), 1000);
 80006d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d8:	2224      	movs	r2, #36	@ 0x24
 80006da:	4989      	ldr	r1, [pc, #548]	@ (8000900 <main+0x340>)
 80006dc:	4881      	ldr	r0, [pc, #516]	@ (80008e4 <main+0x324>)
 80006de:	f004 fa81 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 80006e2:	4b84      	ldr	r3, [pc, #528]	@ (80008f4 <main+0x334>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	4983      	ldr	r1, [pc, #524]	@ (80008f8 <main+0x338>)
 80006ec:	487d      	ldr	r0, [pc, #500]	@ (80008e4 <main+0x324>)
 80006ee:	f004 fb04 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 80006f2:	bf00      	nop
 80006f4:	4b7f      	ldr	r3, [pc, #508]	@ (80008f4 <main+0x334>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0fb      	beq.n	80006f4 <main+0x134>
			input_array[1] = atoi((char*)rx_buffer);
 80006fc:	487f      	ldr	r0, [pc, #508]	@ (80008fc <main+0x33c>)
 80006fe:	f005 fa77 	bl	8005bf0 <atoi>
 8000702:	4603      	mov	r3, r0
 8000704:	61bb      	str	r3, [r7, #24]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070a:	2202      	movs	r2, #2
 800070c:	4974      	ldr	r1, [pc, #464]	@ (80008e0 <main+0x320>)
 800070e:	4875      	ldr	r0, [pc, #468]	@ (80008e4 <main+0x324>)
 8000710:	f004 fa68 	bl	8004be4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart6, "SECOND ZONE CHOICE FOR CONNECTION:",strlen("SECOND ZONE CHOICE FOR CONNECTION:"), 1000);
 8000714:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000718:	2222      	movs	r2, #34	@ 0x22
 800071a:	497a      	ldr	r1, [pc, #488]	@ (8000904 <main+0x344>)
 800071c:	4871      	ldr	r0, [pc, #452]	@ (80008e4 <main+0x324>)
 800071e:	f004 fa61 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8000722:	4b74      	ldr	r3, [pc, #464]	@ (80008f4 <main+0x334>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	4973      	ldr	r1, [pc, #460]	@ (80008f8 <main+0x338>)
 800072c:	486d      	ldr	r0, [pc, #436]	@ (80008e4 <main+0x324>)
 800072e:	f004 fae4 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000732:	bf00      	nop
 8000734:	4b6f      	ldr	r3, [pc, #444]	@ (80008f4 <main+0x334>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0fb      	beq.n	8000734 <main+0x174>
			input_array[2] = atoi((char*)rx_buffer);
 800073c:	486f      	ldr	r0, [pc, #444]	@ (80008fc <main+0x33c>)
 800073e:	f005 fa57 	bl	8005bf0 <atoi>
 8000742:	4603      	mov	r3, r0
 8000744:	61fb      	str	r3, [r7, #28]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074a:	2202      	movs	r2, #2
 800074c:	4964      	ldr	r1, [pc, #400]	@ (80008e0 <main+0x320>)
 800074e:	4865      	ldr	r0, [pc, #404]	@ (80008e4 <main+0x324>)
 8000750:	f004 fa48 	bl	8004be4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart6, "SECOND ZONE CHOICE FOR MOTOR PWM:",strlen("SECOND ZONE CHOICE FOR MOTOR PWM:"), 1000);
 8000754:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000758:	2221      	movs	r2, #33	@ 0x21
 800075a:	496b      	ldr	r1, [pc, #428]	@ (8000908 <main+0x348>)
 800075c:	4861      	ldr	r0, [pc, #388]	@ (80008e4 <main+0x324>)
 800075e:	f004 fa41 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8000762:	4b64      	ldr	r3, [pc, #400]	@ (80008f4 <main+0x334>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	4963      	ldr	r1, [pc, #396]	@ (80008f8 <main+0x338>)
 800076c:	485d      	ldr	r0, [pc, #372]	@ (80008e4 <main+0x324>)
 800076e:	f004 fac4 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000772:	bf00      	nop
 8000774:	4b5f      	ldr	r3, [pc, #380]	@ (80008f4 <main+0x334>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0fb      	beq.n	8000774 <main+0x1b4>
			input_array[3] = atoi((char*)rx_buffer);
 800077c:	485f      	ldr	r0, [pc, #380]	@ (80008fc <main+0x33c>)
 800077e:	f005 fa37 	bl	8005bf0 <atoi>
 8000782:	4603      	mov	r3, r0
 8000784:	623b      	str	r3, [r7, #32]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078a:	2202      	movs	r2, #2
 800078c:	4954      	ldr	r1, [pc, #336]	@ (80008e0 <main+0x320>)
 800078e:	4855      	ldr	r0, [pc, #340]	@ (80008e4 <main+0x324>)
 8000790:	f004 fa28 	bl	8004be4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart6, "THIRD ZONE CHOICE FOR CONNECTION:",strlen("THIRD ZONE CHOICE FOR CONNECTION:"), 1000);
 8000794:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000798:	2221      	movs	r2, #33	@ 0x21
 800079a:	495c      	ldr	r1, [pc, #368]	@ (800090c <main+0x34c>)
 800079c:	4851      	ldr	r0, [pc, #324]	@ (80008e4 <main+0x324>)
 800079e:	f004 fa21 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 80007a2:	4b54      	ldr	r3, [pc, #336]	@ (80008f4 <main+0x334>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	4953      	ldr	r1, [pc, #332]	@ (80008f8 <main+0x338>)
 80007ac:	484d      	ldr	r0, [pc, #308]	@ (80008e4 <main+0x324>)
 80007ae:	f004 faa4 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 80007b2:	bf00      	nop
 80007b4:	4b4f      	ldr	r3, [pc, #316]	@ (80008f4 <main+0x334>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0fb      	beq.n	80007b4 <main+0x1f4>
			input_array[4] = atoi((char*)rx_buffer);
 80007bc:	484f      	ldr	r0, [pc, #316]	@ (80008fc <main+0x33c>)
 80007be:	f005 fa17 	bl	8005bf0 <atoi>
 80007c2:	4603      	mov	r3, r0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 80007c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ca:	2202      	movs	r2, #2
 80007cc:	4944      	ldr	r1, [pc, #272]	@ (80008e0 <main+0x320>)
 80007ce:	4845      	ldr	r0, [pc, #276]	@ (80008e4 <main+0x324>)
 80007d0:	f004 fa08 	bl	8004be4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart6, "THIRD ZONE CHOICE FOR MOTOR PWM:",strlen("THIRD ZONE CHOICE FOR MOTOR PWM:"), 1000);
 80007d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d8:	2220      	movs	r2, #32
 80007da:	494d      	ldr	r1, [pc, #308]	@ (8000910 <main+0x350>)
 80007dc:	4841      	ldr	r0, [pc, #260]	@ (80008e4 <main+0x324>)
 80007de:	f004 fa01 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 80007e2:	4b44      	ldr	r3, [pc, #272]	@ (80008f4 <main+0x334>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	4943      	ldr	r1, [pc, #268]	@ (80008f8 <main+0x338>)
 80007ec:	483d      	ldr	r0, [pc, #244]	@ (80008e4 <main+0x324>)
 80007ee:	f004 fa84 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 80007f2:	bf00      	nop
 80007f4:	4b3f      	ldr	r3, [pc, #252]	@ (80008f4 <main+0x334>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0fb      	beq.n	80007f4 <main+0x234>
			input_array[5] = atoi((char*)rx_buffer);
 80007fc:	483f      	ldr	r0, [pc, #252]	@ (80008fc <main+0x33c>)
 80007fe:	f005 f9f7 	bl	8005bf0 <atoi>
 8000802:	4603      	mov	r3, r0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800080a:	2202      	movs	r2, #2
 800080c:	4934      	ldr	r1, [pc, #208]	@ (80008e0 <main+0x320>)
 800080e:	4835      	ldr	r0, [pc, #212]	@ (80008e4 <main+0x324>)
 8000810:	f004 f9e8 	bl	8004be4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart6, "FOURTH ZONE CHOICE FOR CONNECTION:",strlen("FOURTH ZONE CHOICE FOR CONNECTION:"), 1000);
 8000814:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000818:	2222      	movs	r2, #34	@ 0x22
 800081a:	493e      	ldr	r1, [pc, #248]	@ (8000914 <main+0x354>)
 800081c:	4831      	ldr	r0, [pc, #196]	@ (80008e4 <main+0x324>)
 800081e:	f004 f9e1 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8000822:	4b34      	ldr	r3, [pc, #208]	@ (80008f4 <main+0x334>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000828:	2201      	movs	r2, #1
 800082a:	4933      	ldr	r1, [pc, #204]	@ (80008f8 <main+0x338>)
 800082c:	482d      	ldr	r0, [pc, #180]	@ (80008e4 <main+0x324>)
 800082e:	f004 fa64 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000832:	bf00      	nop
 8000834:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <main+0x334>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0fb      	beq.n	8000834 <main+0x274>
			input_array[6] = atoi((char*)rx_buffer);
 800083c:	482f      	ldr	r0, [pc, #188]	@ (80008fc <main+0x33c>)
 800083e:	f005 f9d7 	bl	8005bf0 <atoi>
 8000842:	4603      	mov	r3, r0
 8000844:	62fb      	str	r3, [r7, #44]	@ 0x2c
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084a:	2202      	movs	r2, #2
 800084c:	4924      	ldr	r1, [pc, #144]	@ (80008e0 <main+0x320>)
 800084e:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <main+0x324>)
 8000850:	f004 f9c8 	bl	8004be4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart6, "FOURTH ZONE CHOICE FOR MOTOR PWM:",strlen("FOURTH ZONE CHOICE FOR MOTOR PWM:"), 1000);
 8000854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000858:	2221      	movs	r2, #33	@ 0x21
 800085a:	492f      	ldr	r1, [pc, #188]	@ (8000918 <main+0x358>)
 800085c:	4821      	ldr	r0, [pc, #132]	@ (80008e4 <main+0x324>)
 800085e:	f004 f9c1 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8000862:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <main+0x334>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	4923      	ldr	r1, [pc, #140]	@ (80008f8 <main+0x338>)
 800086c:	481d      	ldr	r0, [pc, #116]	@ (80008e4 <main+0x324>)
 800086e:	f004 fa44 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000872:	bf00      	nop
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <main+0x334>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d0fb      	beq.n	8000874 <main+0x2b4>
			input_array[7] = atoi((char*)rx_buffer);
 800087c:	481f      	ldr	r0, [pc, #124]	@ (80008fc <main+0x33c>)
 800087e:	f005 f9b7 	bl	8005bf0 <atoi>
 8000882:	4603      	mov	r3, r0
 8000884:	633b      	str	r3, [r7, #48]	@ 0x30
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088a:	2202      	movs	r2, #2
 800088c:	4914      	ldr	r1, [pc, #80]	@ (80008e0 <main+0x320>)
 800088e:	4815      	ldr	r0, [pc, #84]	@ (80008e4 <main+0x324>)
 8000890:	f004 f9a8 	bl	8004be4 <HAL_UART_Transmit>

      //user inputs for wall clock settings

      HAL_UART_Transmit(&huart6, "CURRENT WALL CLOCK TIME:",strlen("CURRENT WALL CLOCK TIME:"), 1000);
 8000894:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000898:	2218      	movs	r2, #24
 800089a:	4920      	ldr	r1, [pc, #128]	@ (800091c <main+0x35c>)
 800089c:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <main+0x324>)
 800089e:	f004 f9a1 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <main+0x334>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80008a8:	2201      	movs	r2, #1
 80008aa:	4913      	ldr	r1, [pc, #76]	@ (80008f8 <main+0x338>)
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <main+0x324>)
 80008ae:	f004 fa24 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 80008b2:	bf00      	nop
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <main+0x334>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0fb      	beq.n	80008b4 <main+0x2f4>
      clock_inputs[0] = atoi((char*)rx_buffer);
 80008bc:	480f      	ldr	r0, [pc, #60]	@ (80008fc <main+0x33c>)
 80008be:	f005 f997 	bl	8005bf0 <atoi>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	723b      	strb	r3, [r7, #8]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 80008c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008cc:	e028      	b.n	8000920 <main+0x360>
 80008ce:	bf00      	nop
 80008d0:	20000184 	.word	0x20000184
 80008d4:	40000400 	.word	0x40000400
 80008d8:	2000013c 	.word	0x2000013c
 80008dc:	40020000 	.word	0x40020000
 80008e0:	08006658 	.word	0x08006658
 80008e4:	200002a4 	.word	0x200002a4
 80008e8:	0800665c 	.word	0x0800665c
 80008ec:	08006670 	.word	0x08006670
 80008f0:	0800668c 	.word	0x0800668c
 80008f4:	200002ef 	.word	0x200002ef
 80008f8:	20000090 	.word	0x20000090
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	080066b4 	.word	0x080066b4
 8000904:	080066dc 	.word	0x080066dc
 8000908:	08006700 	.word	0x08006700
 800090c:	08006724 	.word	0x08006724
 8000910:	08006748 	.word	0x08006748
 8000914:	0800676c 	.word	0x0800676c
 8000918:	08006790 	.word	0x08006790
 800091c:	080067b4 	.word	0x080067b4
 8000920:	2202      	movs	r2, #2
 8000922:	4993      	ldr	r1, [pc, #588]	@ (8000b70 <main+0x5b0>)
 8000924:	4893      	ldr	r0, [pc, #588]	@ (8000b74 <main+0x5b4>)
 8000926:	f004 f95d 	bl	8004be4 <HAL_UART_Transmit>

      HAL_UART_Transmit(&huart6, "INLET WALL CLOCK START TIME:",strlen("INLET WALL CLOCK START TIME:"), 1000);
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	221c      	movs	r2, #28
 8000930:	4991      	ldr	r1, [pc, #580]	@ (8000b78 <main+0x5b8>)
 8000932:	4890      	ldr	r0, [pc, #576]	@ (8000b74 <main+0x5b4>)
 8000934:	f004 f956 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8000938:	4b90      	ldr	r3, [pc, #576]	@ (8000b7c <main+0x5bc>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	498f      	ldr	r1, [pc, #572]	@ (8000b80 <main+0x5c0>)
 8000942:	488c      	ldr	r0, [pc, #560]	@ (8000b74 <main+0x5b4>)
 8000944:	f004 f9d9 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000948:	bf00      	nop
 800094a:	4b8c      	ldr	r3, [pc, #560]	@ (8000b7c <main+0x5bc>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0fb      	beq.n	800094a <main+0x38a>
      clock_inputs[1] = atoi((char*)rx_buffer);
 8000952:	488c      	ldr	r0, [pc, #560]	@ (8000b84 <main+0x5c4>)
 8000954:	f005 f94c 	bl	8005bf0 <atoi>
 8000958:	4603      	mov	r3, r0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	727b      	strb	r3, [r7, #9]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 800095e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000962:	2202      	movs	r2, #2
 8000964:	4982      	ldr	r1, [pc, #520]	@ (8000b70 <main+0x5b0>)
 8000966:	4883      	ldr	r0, [pc, #524]	@ (8000b74 <main+0x5b4>)
 8000968:	f004 f93c 	bl	8004be4 <HAL_UART_Transmit>

      HAL_UART_Transmit(&huart6, "INLET WALL CLOCK STOP TIME:",strlen("INLET WALL CLOCK STOP TIME:"), 1000);
 800096c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000970:	221b      	movs	r2, #27
 8000972:	4985      	ldr	r1, [pc, #532]	@ (8000b88 <main+0x5c8>)
 8000974:	487f      	ldr	r0, [pc, #508]	@ (8000b74 <main+0x5b4>)
 8000976:	f004 f935 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 800097a:	4b80      	ldr	r3, [pc, #512]	@ (8000b7c <main+0x5bc>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	497f      	ldr	r1, [pc, #508]	@ (8000b80 <main+0x5c0>)
 8000984:	487b      	ldr	r0, [pc, #492]	@ (8000b74 <main+0x5b4>)
 8000986:	f004 f9b8 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 800098a:	bf00      	nop
 800098c:	4b7b      	ldr	r3, [pc, #492]	@ (8000b7c <main+0x5bc>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0fb      	beq.n	800098c <main+0x3cc>
      clock_inputs[2] = atoi((char*)rx_buffer);
 8000994:	487b      	ldr	r0, [pc, #492]	@ (8000b84 <main+0x5c4>)
 8000996:	f005 f92b 	bl	8005bf0 <atoi>
 800099a:	4603      	mov	r3, r0
 800099c:	b2db      	uxtb	r3, r3
 800099e:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 80009a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a4:	2202      	movs	r2, #2
 80009a6:	4972      	ldr	r1, [pc, #456]	@ (8000b70 <main+0x5b0>)
 80009a8:	4872      	ldr	r0, [pc, #456]	@ (8000b74 <main+0x5b4>)
 80009aa:	f004 f91b 	bl	8004be4 <HAL_UART_Transmit>

      HAL_UART_Transmit(&huart6, "FIRST ZONE CHOICE WALL CLOCK START TIME:",strlen("FIRST ZONE CHOICE WALL CLOCK START TIME:"), 1000);
 80009ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b2:	2228      	movs	r2, #40	@ 0x28
 80009b4:	4975      	ldr	r1, [pc, #468]	@ (8000b8c <main+0x5cc>)
 80009b6:	486f      	ldr	r0, [pc, #444]	@ (8000b74 <main+0x5b4>)
 80009b8:	f004 f914 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 80009bc:	4b6f      	ldr	r3, [pc, #444]	@ (8000b7c <main+0x5bc>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	496e      	ldr	r1, [pc, #440]	@ (8000b80 <main+0x5c0>)
 80009c6:	486b      	ldr	r0, [pc, #428]	@ (8000b74 <main+0x5b4>)
 80009c8:	f004 f997 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 80009cc:	bf00      	nop
 80009ce:	4b6b      	ldr	r3, [pc, #428]	@ (8000b7c <main+0x5bc>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0fb      	beq.n	80009ce <main+0x40e>
      clock_inputs[3] = atoi((char*)rx_buffer);
 80009d6:	486b      	ldr	r0, [pc, #428]	@ (8000b84 <main+0x5c4>)
 80009d8:	f005 f90a 	bl	8005bf0 <atoi>
 80009dc:	4603      	mov	r3, r0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 80009e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e6:	2202      	movs	r2, #2
 80009e8:	4961      	ldr	r1, [pc, #388]	@ (8000b70 <main+0x5b0>)
 80009ea:	4862      	ldr	r0, [pc, #392]	@ (8000b74 <main+0x5b4>)
 80009ec:	f004 f8fa 	bl	8004be4 <HAL_UART_Transmit>

      HAL_UART_Transmit(&huart6, "FIRST ZONE CHOICE WALL CLOCK STOP TIME:",strlen("FIRST ZONE CHOICE WALL CLOCK STOP TIME:"), 1000);
 80009f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f4:	2227      	movs	r2, #39	@ 0x27
 80009f6:	4966      	ldr	r1, [pc, #408]	@ (8000b90 <main+0x5d0>)
 80009f8:	485e      	ldr	r0, [pc, #376]	@ (8000b74 <main+0x5b4>)
 80009fa:	f004 f8f3 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 80009fe:	4b5f      	ldr	r3, [pc, #380]	@ (8000b7c <main+0x5bc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000a04:	2201      	movs	r2, #1
 8000a06:	495e      	ldr	r1, [pc, #376]	@ (8000b80 <main+0x5c0>)
 8000a08:	485a      	ldr	r0, [pc, #360]	@ (8000b74 <main+0x5b4>)
 8000a0a:	f004 f976 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000a0e:	bf00      	nop
 8000a10:	4b5a      	ldr	r3, [pc, #360]	@ (8000b7c <main+0x5bc>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0fb      	beq.n	8000a10 <main+0x450>
      clock_inputs[4] = atoi((char*)rx_buffer);
 8000a18:	485a      	ldr	r0, [pc, #360]	@ (8000b84 <main+0x5c4>)
 8000a1a:	f005 f8e9 	bl	8005bf0 <atoi>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	733b      	strb	r3, [r7, #12]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000a24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a28:	2202      	movs	r2, #2
 8000a2a:	4951      	ldr	r1, [pc, #324]	@ (8000b70 <main+0x5b0>)
 8000a2c:	4851      	ldr	r0, [pc, #324]	@ (8000b74 <main+0x5b4>)
 8000a2e:	f004 f8d9 	bl	8004be4 <HAL_UART_Transmit>
      
      HAL_UART_Transmit(&huart6, "SECOND ZONE CHOICE WALL CLOCK START TIME:",strlen("SECOND ZONE CHOICE WALL CLOCK START TIME:"), 1000);
 8000a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a36:	2229      	movs	r2, #41	@ 0x29
 8000a38:	4956      	ldr	r1, [pc, #344]	@ (8000b94 <main+0x5d4>)
 8000a3a:	484e      	ldr	r0, [pc, #312]	@ (8000b74 <main+0x5b4>)
 8000a3c:	f004 f8d2 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8000a40:	4b4e      	ldr	r3, [pc, #312]	@ (8000b7c <main+0x5bc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	494d      	ldr	r1, [pc, #308]	@ (8000b80 <main+0x5c0>)
 8000a4a:	484a      	ldr	r0, [pc, #296]	@ (8000b74 <main+0x5b4>)
 8000a4c:	f004 f955 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000a50:	bf00      	nop
 8000a52:	4b4a      	ldr	r3, [pc, #296]	@ (8000b7c <main+0x5bc>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0fb      	beq.n	8000a52 <main+0x492>
      clock_inputs[5] = atoi((char*)rx_buffer);
 8000a5a:	484a      	ldr	r0, [pc, #296]	@ (8000b84 <main+0x5c4>)
 8000a5c:	f005 f8c8 	bl	8005bf0 <atoi>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	737b      	strb	r3, [r7, #13]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4940      	ldr	r1, [pc, #256]	@ (8000b70 <main+0x5b0>)
 8000a6e:	4841      	ldr	r0, [pc, #260]	@ (8000b74 <main+0x5b4>)
 8000a70:	f004 f8b8 	bl	8004be4 <HAL_UART_Transmit>

      HAL_UART_Transmit(&huart6, "SECOND ZONE CHOICE WALL CLOCK STOP TIME:",strlen("SECOND ZONE CHOICE WALL CLOCK STOP TIME:"), 1000);
 8000a74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a78:	2228      	movs	r2, #40	@ 0x28
 8000a7a:	4947      	ldr	r1, [pc, #284]	@ (8000b98 <main+0x5d8>)
 8000a7c:	483d      	ldr	r0, [pc, #244]	@ (8000b74 <main+0x5b4>)
 8000a7e:	f004 f8b1 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8000a82:	4b3e      	ldr	r3, [pc, #248]	@ (8000b7c <main+0x5bc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	493d      	ldr	r1, [pc, #244]	@ (8000b80 <main+0x5c0>)
 8000a8c:	4839      	ldr	r0, [pc, #228]	@ (8000b74 <main+0x5b4>)
 8000a8e:	f004 f934 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000a92:	bf00      	nop
 8000a94:	4b39      	ldr	r3, [pc, #228]	@ (8000b7c <main+0x5bc>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0fb      	beq.n	8000a94 <main+0x4d4>
      clock_inputs[6] = atoi((char*)rx_buffer);
 8000a9c:	4839      	ldr	r0, [pc, #228]	@ (8000b84 <main+0x5c4>)
 8000a9e:	f005 f8a7 	bl	8005bf0 <atoi>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aac:	2202      	movs	r2, #2
 8000aae:	4930      	ldr	r1, [pc, #192]	@ (8000b70 <main+0x5b0>)
 8000ab0:	4830      	ldr	r0, [pc, #192]	@ (8000b74 <main+0x5b4>)
 8000ab2:	f004 f897 	bl	8004be4 <HAL_UART_Transmit>

      HAL_UART_Transmit(&huart6, "THIRD ZONE CHOICE WALL CLOCK START TIME:",strlen("THIRD ZONE CHOICE WALL CLOCK START TIME:"), 1000);
 8000ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aba:	2228      	movs	r2, #40	@ 0x28
 8000abc:	4937      	ldr	r1, [pc, #220]	@ (8000b9c <main+0x5dc>)
 8000abe:	482d      	ldr	r0, [pc, #180]	@ (8000b74 <main+0x5b4>)
 8000ac0:	f004 f890 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b7c <main+0x5bc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	492c      	ldr	r1, [pc, #176]	@ (8000b80 <main+0x5c0>)
 8000ace:	4829      	ldr	r0, [pc, #164]	@ (8000b74 <main+0x5b4>)
 8000ad0:	f004 f913 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000ad4:	bf00      	nop
 8000ad6:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <main+0x5bc>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0fb      	beq.n	8000ad6 <main+0x516>
      clock_inputs[7] = atoi((char*)rx_buffer);
 8000ade:	4829      	ldr	r0, [pc, #164]	@ (8000b84 <main+0x5c4>)
 8000ae0:	f005 f886 	bl	8005bf0 <atoi>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aee:	2202      	movs	r2, #2
 8000af0:	491f      	ldr	r1, [pc, #124]	@ (8000b70 <main+0x5b0>)
 8000af2:	4820      	ldr	r0, [pc, #128]	@ (8000b74 <main+0x5b4>)
 8000af4:	f004 f876 	bl	8004be4 <HAL_UART_Transmit>

      HAL_UART_Transmit(&huart6, "THIRD ZONE CHOICE WALL CLOCK STOP TIME:",strlen("THIRD ZONE CHOICE WALL CLOCK STOP TIME:"), 1000);
 8000af8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afc:	2227      	movs	r2, #39	@ 0x27
 8000afe:	4928      	ldr	r1, [pc, #160]	@ (8000ba0 <main+0x5e0>)
 8000b00:	481c      	ldr	r0, [pc, #112]	@ (8000b74 <main+0x5b4>)
 8000b02:	f004 f86f 	bl	8004be4 <HAL_UART_Transmit>
			rcv_intpt_flag = 00;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <main+0x5bc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	491c      	ldr	r1, [pc, #112]	@ (8000b80 <main+0x5c0>)
 8000b10:	4818      	ldr	r0, [pc, #96]	@ (8000b74 <main+0x5b4>)
 8000b12:	f004 f8f2 	bl	8004cfa <HAL_UART_Receive_IT>
			while(rcv_intpt_flag == (00)){}
 8000b16:	bf00      	nop
 8000b18:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <main+0x5bc>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0fb      	beq.n	8000b18 <main+0x558>
      clock_inputs[8] = atoi((char*)rx_buffer);
 8000b20:	4818      	ldr	r0, [pc, #96]	@ (8000b84 <main+0x5c4>)
 8000b22:	f005 f865 	bl	8005bf0 <atoi>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	743b      	strb	r3, [r7, #16]
			sprintf((char*) txd_msg_buffer, "THIRD PIPELINE LOCATION: %d | THIRD PIPELINE MOTOR PWM: %d \r\n", input_array[4], input_array[5]);
			HAL_UART_Transmit(&huart6, txd_msg_buffer,strlen((char*) txd_msg_buffer), 1000);
			sprintf((char*) txd_msg_buffer, "FOURTH PIPELINE LOCATION: %d | FOURTH PIPELINE MOTOR PWM: %d \r\n", input_array[6], input_array[7]);
			HAL_UART_Transmit(&huart6, txd_msg_buffer,strlen((char*) txd_msg_buffer), 1000);
*/
			HAL_UART_Transmit(&huart6, "\r\n",strlen("\r\n"), 1000);
 8000b2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b30:	2202      	movs	r2, #2
 8000b32:	490f      	ldr	r1, [pc, #60]	@ (8000b70 <main+0x5b0>)
 8000b34:	480f      	ldr	r0, [pc, #60]	@ (8000b74 <main+0x5b4>)
 8000b36:	f004 f855 	bl	8004be4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart6, "SETUP IS DONE. PUSH BLUE BUTTON TO ENTER RUN MODE \r\n",strlen("SETUP IS DONE. PUSH BLUE BUTTON TO ENTER RUN MODE \r\n"), 1000);
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	2234      	movs	r2, #52	@ 0x34
 8000b40:	4918      	ldr	r1, [pc, #96]	@ (8000ba4 <main+0x5e4>)
 8000b42:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <main+0x5b4>)
 8000b44:	f004 f84e 	bl	8004be4 <HAL_UART_Transmit>
			mode = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	657b      	str	r3, [r7, #84]	@ 0x54
	  }
	  if(mode == 1){
 8000b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d13b      	bne.n	8000bca <main+0x60a>
		uint32_t last_toggle_time = HAL_GetTick();
 8000b52:	f001 fbdd 	bl	8002310 <HAL_GetTick>
 8000b56:	6478      	str	r0, [r7, #68]	@ 0x44
		while(HAL_GetTick() - last_toggle_time <= 500){
 8000b58:	e028      	b.n	8000bac <main+0x5ec>
      //stop blinking led if pushbutton is pressed
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000b5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5e:	4812      	ldr	r0, [pc, #72]	@ (8000ba8 <main+0x5e8>)
 8000b60:	f002 faec 	bl	800313c <HAL_GPIO_ReadPin>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d120      	bne.n	8000bac <main+0x5ec>
				mode = 2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 8000b6e:	e025      	b.n	8000bbc <main+0x5fc>
 8000b70:	08006658 	.word	0x08006658
 8000b74:	200002a4 	.word	0x200002a4
 8000b78:	080067d0 	.word	0x080067d0
 8000b7c:	200002ef 	.word	0x200002ef
 8000b80:	20000090 	.word	0x20000090
 8000b84:	2000008c 	.word	0x2000008c
 8000b88:	080067f0 	.word	0x080067f0
 8000b8c:	0800680c 	.word	0x0800680c
 8000b90:	08006838 	.word	0x08006838
 8000b94:	08006860 	.word	0x08006860
 8000b98:	0800688c 	.word	0x0800688c
 8000b9c:	080068b8 	.word	0x080068b8
 8000ba0:	080068e4 	.word	0x080068e4
 8000ba4:	0800690c 	.word	0x0800690c
 8000ba8:	40020800 	.word	0x40020800
		while(HAL_GetTick() - last_toggle_time <= 500){
 8000bac:	f001 fbb0 	bl	8002310 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bba:	d9ce      	bls.n	8000b5a <main+0x59a>
			}
		}
    //blink LD2
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	48a4      	ldr	r0, [pc, #656]	@ (8000e50 <main+0x890>)
 8000bc0:	f002 faed 	bl	800319e <HAL_GPIO_TogglePin>
		last_toggle_time = HAL_GetTick();
 8000bc4:	f001 fba4 	bl	8002310 <HAL_GetTick>
 8000bc8:	6478      	str	r0, [r7, #68]	@ 0x44
	  }
    //enter and setup run mode
	  if(mode == 2){
 8000bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d119      	bne.n	8000c04 <main+0x644>
			HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	489e      	ldr	r0, [pc, #632]	@ (8000e50 <main+0x890>)
 8000bd6:	f002 fac9 	bl	800316c <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart6, "***RUN MODE***\r\n",strlen("***RUN MODE***\r\n"), 1000);
 8000bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bde:	2210      	movs	r2, #16
 8000be0:	499c      	ldr	r1, [pc, #624]	@ (8000e54 <main+0x894>)
 8000be2:	489d      	ldr	r0, [pc, #628]	@ (8000e58 <main+0x898>)
 8000be4:	f003 fffe 	bl	8004be4 <HAL_UART_Transmit>
			// start up wall clock
			HAL_TIM_Base_Start_IT(&htim5);
 8000be8:	489c      	ldr	r0, [pc, #624]	@ (8000e5c <main+0x89c>)
 8000bea:	f003 f84d 	bl	8003c88 <HAL_TIM_Base_Start_IT>
		    clock_hours = clock_inputs[0]; // clock current time
 8000bee:	7a3a      	ldrb	r2, [r7, #8]
 8000bf0:	4b9b      	ldr	r3, [pc, #620]	@ (8000e60 <main+0x8a0>)
 8000bf2:	701a      	strb	r2, [r3, #0]
		    clock_mins = 0;
 8000bf4:	4b9b      	ldr	r3, [pc, #620]	@ (8000e64 <main+0x8a4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
		    clock_secs = 0;
 8000bfa:	4b9b      	ldr	r3, [pc, #620]	@ (8000e68 <main+0x8a8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
			mode = 3;
 8000c00:	2303      	movs	r3, #3
 8000c02:	657b      	str	r3, [r7, #84]	@ 0x54
    }

	if ((man_mode) && (mode != 4) && (mode != 5)){
 8000c04:	4b99      	ldr	r3, [pc, #612]	@ (8000e6c <main+0x8ac>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d04d      	beq.n	8000ca8 <main+0x6e8>
 8000c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d04a      	beq.n	8000ca8 <main+0x6e8>
 8000c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c14:	2b05      	cmp	r3, #5
 8000c16:	d047      	beq.n	8000ca8 <main+0x6e8>
		ADC_Select_CH(4);
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f7ff fcb1 	bl	8000580 <ADC_Select_CH>
		HAL_ADC_Start(&hadc1);
 8000c1e:	4894      	ldr	r0, [pc, #592]	@ (8000e70 <main+0x8b0>)
 8000c20:	f001 fbc6 	bl	80023b0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c28:	4891      	ldr	r0, [pc, #580]	@ (8000e70 <main+0x8b0>)
 8000c2a:	f001 fca8 	bl	800257e <HAL_ADC_PollForConversion>
		uint8_t ADC_CH4 = HAL_ADC_GetValue(&hadc1);
 8000c2e:	4890      	ldr	r0, [pc, #576]	@ (8000e70 <main+0x8b0>)
 8000c30:	f001 fd30 	bl	8002694 <HAL_ADC_GetValue>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		HAL_ADC_Stop(&hadc1);
 8000c3a:	488d      	ldr	r0, [pc, #564]	@ (8000e70 <main+0x8b0>)
 8000c3c:	f001 fc6c 	bl	8002518 <HAL_ADC_Stop>
		if (input_array[0] == 0){
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d107      	bne.n	8000c56 <main+0x696>
			TIM3->CCR3 = ADC_CH4*7;
 8000c46:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9a      	subs	r2, r3, r2
 8000c50:	4b88      	ldr	r3, [pc, #544]	@ (8000e74 <main+0x8b4>)
 8000c52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c54:	e006      	b.n	8000c64 <main+0x6a4>
		}
		else{
			TIM3->CCR1 = ADC_CH4*7;
 8000c56:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	1a9a      	subs	r2, r3, r2
 8000c60:	4b84      	ldr	r3, [pc, #528]	@ (8000e74 <main+0x8b4>)
 8000c62:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		percent_pwm_p = ADC_CH4;
 8000c64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c70:	4b81      	ldr	r3, [pc, #516]	@ (8000e78 <main+0x8b8>)
 8000c72:	edc3 7a00 	vstr	s15, [r3]
		percent_pwm_p = percent_pwm_p /255;
 8000c76:	4b80      	ldr	r3, [pc, #512]	@ (8000e78 <main+0x8b8>)
 8000c78:	ed93 7a00 	vldr	s14, [r3]
 8000c7c:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8000e7c <main+0x8bc>
 8000c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c84:	4b7c      	ldr	r3, [pc, #496]	@ (8000e78 <main+0x8b8>)
 8000c86:	edc3 7a00 	vstr	s15, [r3]
		percent_pwm = percent_pwm_p * 100;
 8000c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e78 <main+0x8b8>)
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8000e80 <main+0x8c0>
 8000c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ca0:	793b      	ldrb	r3, [r7, #4]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b77      	ldr	r3, [pc, #476]	@ (8000e84 <main+0x8c4>)
 8000ca6:	701a      	strb	r2, [r3, #0]
	}

    //run mode functionality
    if(mode == 3){
 8000ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	f040 8113 	bne.w	8000ed6 <main+0x916>
      
      //when zone 1 time equal current clock time
      if((done_setting == false) && (clock_inputs[1] == clock_hours)){
 8000cb0:	4b75      	ldr	r3, [pc, #468]	@ (8000e88 <main+0x8c8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d01c      	beq.n	8000cf8 <main+0x738>
 8000cbe:	7a7a      	ldrb	r2, [r7, #9]
 8000cc0:	4b67      	ldr	r3, [pc, #412]	@ (8000e60 <main+0x8a0>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d116      	bne.n	8000cf8 <main+0x738>
        Set_Pipe(input_array[0]);
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fe7d 	bl	80019cc <Set_Pipe>
        if(input_array[1] == 0){
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <main+0x720>
          man_mode = 1;
 8000cd8:	4b64      	ldr	r3, [pc, #400]	@ (8000e6c <main+0x8ac>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e008      	b.n	8000cf2 <main+0x732>
        }
        else{
        	man_mode = 0;
 8000ce0:	4b62      	ldr	r3, [pc, #392]	@ (8000e6c <main+0x8ac>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
        	Set_Motor(input_array[0], input_array[1]);
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fee3 	bl	8001ab8 <Set_Motor>
        }
        //Hourly_Report();
        done_setting = true;
 8000cf2:	4b65      	ldr	r3, [pc, #404]	@ (8000e88 <main+0x8c8>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
      }
      //when zone 1 stop time, stop motor
      if(done_setting == true && clock_inputs[2] == clock_hours){
 8000cf8:	4b63      	ldr	r3, [pc, #396]	@ (8000e88 <main+0x8c8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d014      	beq.n	8000d2a <main+0x76a>
 8000d00:	7aba      	ldrb	r2, [r7, #10]
 8000d02:	4b57      	ldr	r3, [pc, #348]	@ (8000e60 <main+0x8a0>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d10e      	bne.n	8000d2a <main+0x76a>
        TIM3->CCR1 = 0;
 8000d0c:	4b59      	ldr	r3, [pc, #356]	@ (8000e74 <main+0x8b4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR3 = 0;
 8000d12:	4b58      	ldr	r3, [pc, #352]	@ (8000e74 <main+0x8b4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	@ 0x3c
        percent_pwm = 0;
 8000d18:	4b5a      	ldr	r3, [pc, #360]	@ (8000e84 <main+0x8c4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
        man_mode = 0;
 8000d1e:	4b53      	ldr	r3, [pc, #332]	@ (8000e6c <main+0x8ac>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
        done_setting = false;
 8000d24:	4b58      	ldr	r3, [pc, #352]	@ (8000e88 <main+0x8c8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
      }
      //when zone 2 start time
      if(done_setting == false && clock_inputs[3] == clock_hours){
 8000d2a:	4b57      	ldr	r3, [pc, #348]	@ (8000e88 <main+0x8c8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01c      	beq.n	8000d72 <main+0x7b2>
 8000d38:	7afa      	ldrb	r2, [r7, #11]
 8000d3a:	4b49      	ldr	r3, [pc, #292]	@ (8000e60 <main+0x8a0>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d116      	bne.n	8000d72 <main+0x7b2>
        Set_Pipe(input_array[2]);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fe40 	bl	80019cc <Set_Pipe>
        if(input_array[3] == 0){
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <main+0x79a>
		  man_mode = 1;
 8000d52:	4b46      	ldr	r3, [pc, #280]	@ (8000e6c <main+0x8ac>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e008      	b.n	8000d6c <main+0x7ac>
		}
		else{
			man_mode = 0;
 8000d5a:	4b44      	ldr	r3, [pc, #272]	@ (8000e6c <main+0x8ac>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
			Set_Motor(input_array[2], input_array[3]);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	6a3a      	ldr	r2, [r7, #32]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fea6 	bl	8001ab8 <Set_Motor>
		}
        done_setting = true;
 8000d6c:	4b46      	ldr	r3, [pc, #280]	@ (8000e88 <main+0x8c8>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
      }
      //when zone 2 stop time
      if(done_setting == true && clock_inputs[4] == clock_hours){
 8000d72:	4b45      	ldr	r3, [pc, #276]	@ (8000e88 <main+0x8c8>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d014      	beq.n	8000da4 <main+0x7e4>
 8000d7a:	7b3a      	ldrb	r2, [r7, #12]
 8000d7c:	4b38      	ldr	r3, [pc, #224]	@ (8000e60 <main+0x8a0>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d10e      	bne.n	8000da4 <main+0x7e4>
        TIM3->CCR1 = 0;
 8000d86:	4b3b      	ldr	r3, [pc, #236]	@ (8000e74 <main+0x8b4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR3 = 0;
 8000d8c:	4b39      	ldr	r3, [pc, #228]	@ (8000e74 <main+0x8b4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	63da      	str	r2, [r3, #60]	@ 0x3c
        percent_pwm = 0;
 8000d92:	4b3c      	ldr	r3, [pc, #240]	@ (8000e84 <main+0x8c4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
        done_setting = false;
 8000d98:	4b3b      	ldr	r3, [pc, #236]	@ (8000e88 <main+0x8c8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
        man_mode = 0;
 8000d9e:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <main+0x8ac>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
      }
      //when zone 3 start time
      if(done_setting == false && clock_inputs[5] == clock_hours){
 8000da4:	4b38      	ldr	r3, [pc, #224]	@ (8000e88 <main+0x8c8>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f083 0301 	eor.w	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d01c      	beq.n	8000dec <main+0x82c>
 8000db2:	7b7a      	ldrb	r2, [r7, #13]
 8000db4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <main+0x8a0>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d116      	bne.n	8000dec <main+0x82c>
        Set_Pipe(input_array[4]);
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fe03 	bl	80019cc <Set_Pipe>
        if(input_array[5] == 0){
 8000dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d103      	bne.n	8000dd4 <main+0x814>
		  man_mode = 1;
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <main+0x8ac>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e008      	b.n	8000de6 <main+0x826>
		}
		else{
			man_mode = 0;
 8000dd4:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <main+0x8ac>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
			Set_Motor(input_array[4], input_array[5]);
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fe69 	bl	8001ab8 <Set_Motor>
		}
        done_setting = true;
 8000de6:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <main+0x8c8>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
      }
      //when zone 3 stop time
      if(done_setting == true && clock_inputs[6] == clock_hours){
 8000dec:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <main+0x8c8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d014      	beq.n	8000e1e <main+0x85e>
 8000df4:	7bba      	ldrb	r2, [r7, #14]
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <main+0x8a0>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d10e      	bne.n	8000e1e <main+0x85e>
        TIM3->CCR1 = 0;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <main+0x8b4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR3 = 0;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <main+0x8b4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	63da      	str	r2, [r3, #60]	@ 0x3c
        percent_pwm = 0;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <main+0x8c4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
        done_setting = false;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <main+0x8c8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
        man_mode = 0;
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <main+0x8ac>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
      }
      //when zone 4 start time
      if(done_setting == false && clock_inputs[7] == clock_hours){
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <main+0x8c8>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	f083 0301 	eor.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d03b      	beq.n	8000ea4 <main+0x8e4>
 8000e2c:	7bfa      	ldrb	r2, [r7, #15]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <main+0x8a0>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d135      	bne.n	8000ea4 <main+0x8e4>
        Set_Pipe(input_array[6]);
 8000e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fdc6 	bl	80019cc <Set_Pipe>
        if(input_array[7] == 0){
 8000e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d122      	bne.n	8000e8c <main+0x8cc>
		  man_mode = 1;
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <main+0x8ac>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e027      	b.n	8000e9e <main+0x8de>
 8000e4e:	bf00      	nop
 8000e50:	40020000 	.word	0x40020000
 8000e54:	08006944 	.word	0x08006944
 8000e58:	200002a4 	.word	0x200002a4
 8000e5c:	200001cc 	.word	0x200001cc
 8000e60:	200002ec 	.word	0x200002ec
 8000e64:	200002ed 	.word	0x200002ed
 8000e68:	200002ee 	.word	0x200002ee
 8000e6c:	200000ec 	.word	0x200000ec
 8000e70:	200000f4 	.word	0x200000f4
 8000e74:	40000400 	.word	0x40000400
 8000e78:	200000e4 	.word	0x200000e4
 8000e7c:	437f0000 	.word	0x437f0000
 8000e80:	42c80000 	.word	0x42c80000
 8000e84:	200000e0 	.word	0x200000e0
 8000e88:	200000e9 	.word	0x200000e9
		}
		else{
			man_mode = 0;
 8000e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001100 <main+0xb40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
			Set_Motor(input_array[6], input_array[7]);
 8000e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fe0d 	bl	8001ab8 <Set_Motor>
		}
        done_setting = true;
 8000e9e:	4b99      	ldr	r3, [pc, #612]	@ (8001104 <main+0xb44>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
      }
      //when zone 4 stop time
      if(done_setting == true && clock_inputs[8] == clock_hours){
 8000ea4:	4b97      	ldr	r3, [pc, #604]	@ (8001104 <main+0xb44>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d014      	beq.n	8000ed6 <main+0x916>
 8000eac:	7c3a      	ldrb	r2, [r7, #16]
 8000eae:	4b96      	ldr	r3, [pc, #600]	@ (8001108 <main+0xb48>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d10e      	bne.n	8000ed6 <main+0x916>
        TIM3->CCR1 = 0;
 8000eb8:	4b94      	ldr	r3, [pc, #592]	@ (800110c <main+0xb4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR3 = 0;
 8000ebe:	4b93      	ldr	r3, [pc, #588]	@ (800110c <main+0xb4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
        percent_pwm = 0;
 8000ec4:	4b92      	ldr	r3, [pc, #584]	@ (8001110 <main+0xb50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
        done_setting = false;
 8000eca:	4b8e      	ldr	r3, [pc, #568]	@ (8001104 <main+0xb44>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
        man_mode = 0;
 8000ed0:	4b8b      	ldr	r3, [pc, #556]	@ (8001100 <main+0xb40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
      }

    }

    if ((halftime) && (mode != 4) && (mode != 5)){
 8000ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8001114 <main+0xb54>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80c5 	beq.w	800106a <main+0xaaa>
 8000ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	f000 80c1 	beq.w	800106a <main+0xaaa>
 8000ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	f000 80bd 	beq.w	800106a <main+0xaaa>
    	us100_Rx_flag = 0;
 8000ef0:	4b89      	ldr	r3, [pc, #548]	@ (8001118 <main+0xb58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, us100_buffer, 2);
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4988      	ldr	r1, [pc, #544]	@ (800111c <main+0xb5c>)
 8000efa:	4889      	ldr	r0, [pc, #548]	@ (8001120 <main+0xb60>)
 8000efc:	f003 fefd 	bl	8004cfa <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart1, &cmd_dist, 1, 500);
 8000f00:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f04:	2201      	movs	r2, #1
 8000f06:	4987      	ldr	r1, [pc, #540]	@ (8001124 <main+0xb64>)
 8000f08:	4885      	ldr	r0, [pc, #532]	@ (8001120 <main+0xb60>)
 8000f0a:	f003 fe6b 	bl	8004be4 <HAL_UART_Transmit>
		while (us100_Rx_flag == (00)) {};
 8000f0e:	bf00      	nop
 8000f10:	4b81      	ldr	r3, [pc, #516]	@ (8001118 <main+0xb58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0fa      	beq.n	8000f10 <main+0x950>
		distance = us100_buffer[0];
 8000f1a:	4b80      	ldr	r3, [pc, #512]	@ (800111c <main+0xb5c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b81      	ldr	r3, [pc, #516]	@ (8001128 <main+0xb68>)
 8000f22:	801a      	strh	r2, [r3, #0]
		distance = (distance << 8) + us100_buffer[1];
 8000f24:	4b80      	ldr	r3, [pc, #512]	@ (8001128 <main+0xb68>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800111c <main+0xb5c>)
 8000f30:	7852      	ldrb	r2, [r2, #1]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b7c      	ldr	r3, [pc, #496]	@ (8001128 <main+0xb68>)
 8000f38:	801a      	strh	r2, [r3, #0]
		float distance_p = distance;
 8000f3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001128 <main+0xb68>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f48:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		distance_p = 1-(distance_p / 750);
 8000f4c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000f50:	eddf 6a76 	vldr	s13, [pc, #472]	@ 800112c <main+0xb6c>
 8000f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f60:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		distance = distance_p*100;
 8000f64:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f68:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001130 <main+0xb70>
 8000f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f74:	ee17 3a90 	vmov	r3, s15
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b6b      	ldr	r3, [pc, #428]	@ (8001128 <main+0xb68>)
 8000f7c:	801a      	strh	r2, [r3, #0]

		if(distance <= 0){ // special event
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001128 <main+0xb68>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d116      	bne.n	8000fb6 <main+0x9f6>
			TIM3->CCR1 = 0; // motor off
 8000f88:	4b60      	ldr	r3, [pc, #384]	@ (800110c <main+0xb4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM3->CCR3 = 0;
 8000f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800110c <main+0xb4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
			percent_pwm = 0;
 8000f94:	4b5e      	ldr	r3, [pc, #376]	@ (8001110 <main+0xb50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6, "RESERVOIR IS EMPTY \r\n",strlen("RESERVOIR IS EMPTY \r\n"), 1000);
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	2215      	movs	r2, #21
 8000fa0:	4964      	ldr	r1, [pc, #400]	@ (8001134 <main+0xb74>)
 8000fa2:	4865      	ldr	r0, [pc, #404]	@ (8001138 <main+0xb78>)
 8000fa4:	f003 fe1e 	bl	8004be4 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET); //LD2 off
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	4863      	ldr	r0, [pc, #396]	@ (800113c <main+0xb7c>)
 8000fae:	f002 f8dd 	bl	800316c <HAL_GPIO_WritePin>
			mode = 4;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	657b      	str	r3, [r7, #84]	@ 0x54

		}

		//display depth on timer board
		DIG_A = distance / 10;
 8000fb6:	4b5c      	ldr	r3, [pc, #368]	@ (8001128 <main+0xb68>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4a60      	ldr	r2, [pc, #384]	@ (8001140 <main+0xb80>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	08db      	lsrs	r3, r3, #3
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001144 <main+0xb84>)
 8000fca:	701a      	strb	r2, [r3, #0]
		DIG_B = distance % 10;
 8000fcc:	4b56      	ldr	r3, [pc, #344]	@ (8001128 <main+0xb68>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001140 <main+0xb80>)
 8000fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd8:	08d9      	lsrs	r1, r3, #3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b57      	ldr	r3, [pc, #348]	@ (8001148 <main+0xb88>)
 8000fea:	701a      	strb	r2, [r3, #0]
		DIGITS_Display(DIG_A, DIG_B);
 8000fec:	4b55      	ldr	r3, [pc, #340]	@ (8001144 <main+0xb84>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b55      	ldr	r3, [pc, #340]	@ (8001148 <main+0xb88>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f000 fc25 	bl	8001848 <DIGITS_Display>
    	uint32_t last_toggle_time2 = HAL_GetTick();
 8000ffe:	f001 f987 	bl	8002310 <HAL_GetTick>
 8001002:	63b8      	str	r0, [r7, #56]	@ 0x38
    	rpm_tick_start = rpm_tick_count;
 8001004:	4b51      	ldr	r3, [pc, #324]	@ (800114c <main+0xb8c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	64fb      	str	r3, [r7, #76]	@ 0x4c
    	while(HAL_GetTick() - last_toggle_time2 <= 1000){}
 800100a:	bf00      	nop
 800100c:	f001 f980 	bl	8002310 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800101a:	d9f7      	bls.n	800100c <main+0xa4c>
    	rpm = (rpm_tick_count - rpm_tick_start);
 800101c:	4b4b      	ldr	r3, [pc, #300]	@ (800114c <main+0xb8c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102c:	4b48      	ldr	r3, [pc, #288]	@ (8001150 <main+0xb90>)
 800102e:	edc3 7a00 	vstr	s15, [r3]
    	rpm = (rpm/20)*(60/1);
 8001032:	4b47      	ldr	r3, [pc, #284]	@ (8001150 <main+0xb90>)
 8001034:	ed93 7a00 	vldr	s14, [r3]
 8001038:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800103c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001040:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001154 <main+0xb94>
 8001044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001048:	4b41      	ldr	r3, [pc, #260]	@ (8001150 <main+0xb90>)
 800104a:	edc3 7a00 	vstr	s15, [r3]
    	rpm_p = rpm;
 800104e:	4b40      	ldr	r3, [pc, #256]	@ (8001150 <main+0xb90>)
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001058:	ee17 2a90 	vmov	r2, s15
 800105c:	4b3e      	ldr	r3, [pc, #248]	@ (8001158 <main+0xb98>)
 800105e:	601a      	str	r2, [r3, #0]
    	halftime = 0;
 8001060:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <main+0xb54>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
    	Hourly_Report();
 8001066:	f000 fd7b 	bl	8001b60 <Hourly_Report>
	}

    if (mode == 4){
 800106a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800106c:	2b04      	cmp	r3, #4
 800106e:	d137      	bne.n	80010e0 <main+0xb20>

		  uint32_t last_toggle_time2 = HAL_GetTick();
 8001070:	f001 f94e 	bl	8002310 <HAL_GetTick>
 8001074:	6378      	str	r0, [r7, #52]	@ 0x34
		  while(HAL_GetTick() - last_toggle_time2 <= 500){}
 8001076:	bf00      	nop
 8001078:	f001 f94a 	bl	8002310 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001086:	d9f7      	bls.n	8001078 <main+0xab8>
		  if (on_off == 0){
 8001088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800108a:	2b00      	cmp	r3, #0
 800108c:	d111      	bne.n	80010b2 <main+0xaf2>
			  HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2101      	movs	r1, #1
 8001092:	4832      	ldr	r0, [pc, #200]	@ (800115c <main+0xb9c>)
 8001094:	f002 f86a 	bl	800316c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	482f      	ldr	r0, [pc, #188]	@ (800115c <main+0xb9c>)
 800109e:	f002 f865 	bl	800316c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2102      	movs	r1, #2
 80010a6:	4825      	ldr	r0, [pc, #148]	@ (800113c <main+0xb7c>)
 80010a8:	f002 f860 	bl	800316c <HAL_GPIO_WritePin>
			  on_off = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80010b0:	e013      	b.n	80010da <main+0xb1a>
		  }
		  else if (on_off){
 80010b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d010      	beq.n	80010da <main+0xb1a>
			  HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	4827      	ldr	r0, [pc, #156]	@ (800115c <main+0xb9c>)
 80010be:	f002 f855 	bl	800316c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2180      	movs	r1, #128	@ 0x80
 80010c6:	4825      	ldr	r0, [pc, #148]	@ (800115c <main+0xb9c>)
 80010c8:	f002 f850 	bl	800316c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2102      	movs	r1, #2
 80010d0:	481a      	ldr	r0, [pc, #104]	@ (800113c <main+0xb7c>)
 80010d2:	f002 f84b 	bl	800316c <HAL_GPIO_WritePin>
			  on_off = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	653b      	str	r3, [r7, #80]	@ 0x50
		  }
		  last_toggle_time2 = HAL_GetTick();
 80010da:	f001 f919 	bl	8002310 <HAL_GetTick>
 80010de:	6378      	str	r0, [r7, #52]	@ 0x34
    }
    if(clock_hours == 24){
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <main+0xb48>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b18      	cmp	r3, #24
 80010e8:	f47f aabb 	bne.w	8000662 <main+0xa2>
    	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET); //LD2 off
 80010ec:	2200      	movs	r2, #0
 80010ee:	2120      	movs	r1, #32
 80010f0:	4812      	ldr	r0, [pc, #72]	@ (800113c <main+0xb7c>)
 80010f2:	f002 f83b 	bl	800316c <HAL_GPIO_WritePin>
	    mode = 5;
 80010f6:	2305      	movs	r3, #5
 80010f8:	657b      	str	r3, [r7, #84]	@ 0x54
	  if (mode == 0){
 80010fa:	f7ff bab2 	b.w	8000662 <main+0xa2>
 80010fe:	bf00      	nop
 8001100:	200000ec 	.word	0x200000ec
 8001104:	200000e9 	.word	0x200000e9
 8001108:	200002ec 	.word	0x200002ec
 800110c:	40000400 	.word	0x40000400
 8001110:	200000e0 	.word	0x200000e0
 8001114:	200000dc 	.word	0x200000dc
 8001118:	20000080 	.word	0x20000080
 800111c:	2000007c 	.word	0x2000007c
 8001120:	20000214 	.word	0x20000214
 8001124:	20000000 	.word	0x20000000
 8001128:	2000007e 	.word	0x2000007e
 800112c:	443b8000 	.word	0x443b8000
 8001130:	42c80000 	.word	0x42c80000
 8001134:	08006958 	.word	0x08006958
 8001138:	200002a4 	.word	0x200002a4
 800113c:	40020000 	.word	0x40020000
 8001140:	cccccccd 	.word	0xcccccccd
 8001144:	200000f0 	.word	0x200000f0
 8001148:	200000f1 	.word	0x200000f1
 800114c:	20000084 	.word	0x20000084
 8001150:	200000d4 	.word	0x200000d4
 8001154:	42700000 	.word	0x42700000
 8001158:	200000d8 	.word	0x200000d8
 800115c:	40020400 	.word	0x40020400

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2230      	movs	r2, #48	@ 0x30
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fde6 	bl	8005d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <SystemClock_Config+0xb8>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <SystemClock_Config+0xb8>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <SystemClock_Config+0xb8>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <SystemClock_Config+0xbc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011ac:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <SystemClock_Config+0xbc>)
 80011ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <SystemClock_Config+0xbc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c0:	2302      	movs	r3, #2
 80011c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	2310      	movs	r3, #16
 80011ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 f815 	bl	8003204 <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011e0:	f000 fd5a 	bl	8001c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	230f      	movs	r3, #15
 80011e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fa78 	bl	80036f4 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800120a:	f000 fd45 	bl	8001c98 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3750      	adds	r7, #80	@ 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001232:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <MX_ADC1_Init+0x98>)
 8001234:	4a21      	ldr	r2, [pc, #132]	@ (80012bc <MX_ADC1_Init+0x9c>)
 8001236:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <MX_ADC1_Init+0x98>)
 8001240:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001244:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001246:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <MX_ADC1_Init+0x98>)
 8001248:	2201      	movs	r2, #1
 800124a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800124c:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <MX_ADC1_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <MX_ADC1_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_ADC1_Init+0x98>)
 8001262:	4a17      	ldr	r2, [pc, #92]	@ (80012c0 <MX_ADC1_Init+0xa0>)
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <MX_ADC1_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <MX_ADC1_Init+0x98>)
 800126e:	2201      	movs	r2, #1
 8001270:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_ADC1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MX_ADC1_Init+0x98>)
 800127c:	2201      	movs	r2, #1
 800127e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001280:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <MX_ADC1_Init+0x98>)
 8001282:	f001 f851 	bl	8002328 <HAL_ADC_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800128c:	f000 fd04 	bl	8001c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001290:	2304      	movs	r3, #4
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001294:	2301      	movs	r3, #1
 8001296:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001298:	2301      	movs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_ADC1_Init+0x98>)
 80012a2:	f001 fa05 	bl	80026b0 <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012ac:	f000 fcf4 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000f4 	.word	0x200000f4
 80012bc:	40012000 	.word	0x40012000
 80012c0:	0f000001 	.word	0x0f000001

080012c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	@ 0x38
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <MX_TIM2_Init+0xe8>)
 80012f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80012fc:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <MX_TIM2_Init+0xe8>)
 80012fe:	220f      	movs	r2, #15
 8001300:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <MX_TIM2_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <MX_TIM2_Init+0xe8>)
 800130a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800130e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <MX_TIM2_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001316:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <MX_TIM2_Init+0xe8>)
 8001318:	2280      	movs	r2, #128	@ 0x80
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131c:	4823      	ldr	r0, [pc, #140]	@ (80013ac <MX_TIM2_Init+0xe8>)
 800131e:	f002 fc09 	bl	8003b34 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001328:	f000 fcb6 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001336:	4619      	mov	r1, r3
 8001338:	481c      	ldr	r0, [pc, #112]	@ (80013ac <MX_TIM2_Init+0xe8>)
 800133a:	f002 ffb9 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001344:	f000 fca8 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001348:	4818      	ldr	r0, [pc, #96]	@ (80013ac <MX_TIM2_Init+0xe8>)
 800134a:	f002 fcff 	bl	8003d4c <HAL_TIM_PWM_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001354:	f000 fca0 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	4619      	mov	r1, r3
 8001366:	4811      	ldr	r0, [pc, #68]	@ (80013ac <MX_TIM2_Init+0xe8>)
 8001368:	f003 fb6a 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001372:	f000 fc91 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001376:	2360      	movs	r3, #96	@ 0x60
 8001378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800137a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800137e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4807      	ldr	r0, [pc, #28]	@ (80013ac <MX_TIM2_Init+0xe8>)
 8001390:	f002 fecc 	bl	800412c <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800139a:	f000 fc7d 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800139e:	4803      	ldr	r0, [pc, #12]	@ (80013ac <MX_TIM2_Init+0xe8>)
 80013a0:	f000 fd4a 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 80013a4:	bf00      	nop
 80013a6:	3738      	adds	r7, #56	@ 0x38
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000013c 	.word	0x2000013c

080013b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d2:	4b29      	ldr	r3, [pc, #164]	@ (8001478 <MX_TIM3_Init+0xc8>)
 80013d4:	4a29      	ldr	r2, [pc, #164]	@ (800147c <MX_TIM3_Init+0xcc>)
 80013d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80013d8:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <MX_TIM3_Init+0xc8>)
 80013da:	220f      	movs	r2, #15
 80013dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <MX_TIM3_Init+0xc8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80013e4:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <MX_TIM3_Init+0xc8>)
 80013e6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80013ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_TIM3_Init+0xc8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_TIM3_Init+0xc8>)
 80013f4:	2280      	movs	r2, #128	@ 0x80
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013f8:	481f      	ldr	r0, [pc, #124]	@ (8001478 <MX_TIM3_Init+0xc8>)
 80013fa:	f002 fca7 	bl	8003d4c <HAL_TIM_PWM_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001404:	f000 fc48 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001410:	f107 0320 	add.w	r3, r7, #32
 8001414:	4619      	mov	r1, r3
 8001416:	4818      	ldr	r0, [pc, #96]	@ (8001478 <MX_TIM3_Init+0xc8>)
 8001418:	f003 fb12 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001422:	f000 fc39 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001426:	2360      	movs	r3, #96	@ 0x60
 8001428:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1200-1;
 800142a:	f240 43af 	movw	r3, #1199	@ 0x4af
 800142e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <MX_TIM3_Init+0xc8>)
 8001440:	f002 fe74 	bl	800412c <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800144a:	f000 fc25 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2208      	movs	r2, #8
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	@ (8001478 <MX_TIM3_Init+0xc8>)
 800145a:	f002 fe67 	bl	800412c <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001464:	f000 fc18 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <MX_TIM3_Init+0xc8>)
 800146a:	f000 fce5 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	@ 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000184 	.word	0x20000184
 800147c:	40000400 	.word	0x40000400

08001480 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800149c:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_TIM5_Init+0x94>)
 800149e:	4a1e      	ldr	r2, [pc, #120]	@ (8001518 <MX_TIM5_Init+0x98>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = (16000-1)/300;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <MX_TIM5_Init+0x94>)
 80014a4:	2235      	movs	r2, #53	@ 0x35
 80014a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <MX_TIM5_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80014ae:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <MX_TIM5_Init+0x94>)
 80014b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <MX_TIM5_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <MX_TIM5_Init+0x94>)
 80014be:	2280      	movs	r2, #128	@ 0x80
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014c2:	4814      	ldr	r0, [pc, #80]	@ (8001514 <MX_TIM5_Init+0x94>)
 80014c4:	f002 fb36 	bl	8003b34 <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80014ce:	f000 fbe3 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	@ (8001514 <MX_TIM5_Init+0x94>)
 80014e0:	f002 fee6 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 fbd5 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	@ (8001514 <MX_TIM5_Init+0x94>)
 80014fc:	f003 faa0 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001506:	f000 fbc7 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200001cc 	.word	0x200001cc
 8001518:	40000c00 	.word	0x40000c00

0800151c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <MX_USART1_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001528:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800152c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001554:	f003 faf6 	bl	8004b44 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f000 fb9b 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000214 	.word	0x20000214
 800156c:	40011000 	.word	0x40011000

08001570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <MX_USART2_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a8:	f003 facc 	bl	8004b44 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f000 fb71 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000025c 	.word	0x2000025c
 80015c0:	40004400 	.word	0x40004400

080015c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MX_USART6_UART_Init+0x4c>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_USART6_UART_Init+0x50>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <MX_USART6_UART_Init+0x4c>)
 80015d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_USART6_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <MX_USART6_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <MX_USART6_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <MX_USART6_UART_Init+0x4c>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <MX_USART6_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <MX_USART6_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_USART6_UART_Init+0x4c>)
 80015fc:	f003 faa2 	bl	8004b44 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001606:	f000 fb47 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200002a4 	.word	0x200002a4
 8001614:	40011400 	.word	0x40011400

08001618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b4c      	ldr	r3, [pc, #304]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a4b      	ldr	r2, [pc, #300]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b49      	ldr	r3, [pc, #292]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a44      	ldr	r2, [pc, #272]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b42      	ldr	r3, [pc, #264]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a3d      	ldr	r2, [pc, #244]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b37      	ldr	r3, [pc, #220]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a36      	ldr	r2, [pc, #216]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin|DIGIT_B1_Pin
 800169e:	2200      	movs	r2, #0
 80016a0:	f641 410f 	movw	r1, #7183	@ 0x1c0f
 80016a4:	4830      	ldr	r0, [pc, #192]	@ (8001768 <MX_GPIO_Init+0x150>)
 80016a6:	f001 fd61 	bl	800316c <HAL_GPIO_WritePin>
                          |DIGIT_A3_Pin|DIGIT_A2_Pin|DIGIT_A1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GRN_Pin|LD2_Pin|DIGIT_A0_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f248 0122 	movw	r1, #32802	@ 0x8022
 80016b0:	482e      	ldr	r0, [pc, #184]	@ (800176c <MX_GPIO_Init+0x154>)
 80016b2:	f001 fd5b 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLU_Pin|RED_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2181      	movs	r1, #129	@ 0x81
 80016ba:	482d      	ldr	r0, [pc, #180]	@ (8001770 <MX_GPIO_Init+0x158>)
 80016bc:	f001 fd56 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1_Pin */
  GPIO_InitStruct.Pin = PB1_Pin;
 80016c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB1_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4824      	ldr	r0, [pc, #144]	@ (8001768 <MX_GPIO_Init+0x150>)
 80016d6:	f001 fbad 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B0_Pin DIGIT_B2_Pin DIGIT_B3_Pin DIGIT_B1_Pin
                           DIGIT_A3_Pin DIGIT_A2_Pin DIGIT_A1_Pin */
  GPIO_InitStruct.Pin = DIGIT_B0_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin|DIGIT_B1_Pin
 80016da:	f641 430f 	movw	r3, #7183	@ 0x1c0f
 80016de:	617b      	str	r3, [r7, #20]
                          |DIGIT_A3_Pin|DIGIT_A2_Pin|DIGIT_A1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	481d      	ldr	r0, [pc, #116]	@ (8001768 <MX_GPIO_Init+0x150>)
 80016f4:	f001 fb9e 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRN_Pin LD2_Pin DIGIT_A0_Pin */
  GPIO_InitStruct.Pin = GRN_Pin|LD2_Pin|DIGIT_A0_Pin;
 80016f8:	f248 0322 	movw	r3, #32802	@ 0x8022
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4816      	ldr	r0, [pc, #88]	@ (800176c <MX_GPIO_Init+0x154>)
 8001712:	f001 fb8f 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLU_Pin RED_Pin */
  GPIO_InitStruct.Pin = BLU_Pin|RED_Pin;
 8001716:	2381      	movs	r3, #129	@ 0x81
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4810      	ldr	r0, [pc, #64]	@ (8001770 <MX_GPIO_Init+0x158>)
 800172e:	f001 fb81 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8001732:	2304      	movs	r3, #4
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001736:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	480a      	ldr	r0, [pc, #40]	@ (8001770 <MX_GPIO_Init+0x158>)
 8001748:	f001 fb74 	bl	8002e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	2008      	movs	r0, #8
 8001752:	f001 faa6 	bl	8002ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001756:	2008      	movs	r0, #8
 8001758:	f001 fabf 	bl	8002cda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	40020800 	.word	0x40020800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020400 	.word	0x40020400

08001774 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if(huart->Instance ==USART1){
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1e      	ldr	r2, [pc, #120]	@ (80017fc <HAL_UART_RxCpltCallback+0x88>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d102      	bne.n	800178c <HAL_UART_RxCpltCallback+0x18>
		us100_Rx_flag = 1;
 8001786:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <HAL_UART_RxCpltCallback+0x8c>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
	}
	if (huart->Instance == USART6)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1c      	ldr	r2, [pc, #112]	@ (8001804 <HAL_UART_RxCpltCallback+0x90>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12e      	bne.n	80017f4 <HAL_UART_RxCpltCallback+0x80>
	{
		// Store received byte in the buffer
		if (rx_byte != '\n' && rx_byte != '\r' && rx_index < 3 - 1) {
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <HAL_UART_RxCpltCallback+0x94>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d01e      	beq.n	80017dc <HAL_UART_RxCpltCallback+0x68>
 800179e:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_UART_RxCpltCallback+0x94>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b0d      	cmp	r3, #13
 80017a4:	d01a      	beq.n	80017dc <HAL_UART_RxCpltCallback+0x68>
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_UART_RxCpltCallback+0x98>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d816      	bhi.n	80017dc <HAL_UART_RxCpltCallback+0x68>
			rx_buffer[rx_index++] = rx_byte; // Add character to buffer
 80017ae:	4b17      	ldr	r3, [pc, #92]	@ (800180c <HAL_UART_RxCpltCallback+0x98>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	b2d1      	uxtb	r1, r2
 80017b6:	4a15      	ldr	r2, [pc, #84]	@ (800180c <HAL_UART_RxCpltCallback+0x98>)
 80017b8:	7011      	strb	r1, [r2, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_UART_RxCpltCallback+0x94>)
 80017be:	7819      	ldrb	r1, [r3, #0]
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_UART_RxCpltCallback+0x9c>)
 80017c2:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&huart6, &rx_byte, 1, 100);
 80017c4:	2364      	movs	r3, #100	@ 0x64
 80017c6:	2201      	movs	r2, #1
 80017c8:	490f      	ldr	r1, [pc, #60]	@ (8001808 <HAL_UART_RxCpltCallback+0x94>)
 80017ca:	4812      	ldr	r0, [pc, #72]	@ (8001814 <HAL_UART_RxCpltCallback+0xa0>)
 80017cc:	f003 fa0a 	bl	8004be4 <HAL_UART_Transmit>
			// Re-enable reception for the next byte
			HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	490d      	ldr	r1, [pc, #52]	@ (8001808 <HAL_UART_RxCpltCallback+0x94>)
 80017d4:	480f      	ldr	r0, [pc, #60]	@ (8001814 <HAL_UART_RxCpltCallback+0xa0>)
 80017d6:	f003 fa90 	bl	8004cfa <HAL_UART_Receive_IT>

			// Reset the buffer for the next input
			rx_index = 0;
		}
	}
}
 80017da:	e00b      	b.n	80017f4 <HAL_UART_RxCpltCallback+0x80>
			rx_buffer[rx_index] = '\0'; // Null-terminate the string
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_UART_RxCpltCallback+0x98>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_UART_RxCpltCallback+0x9c>)
 80017e4:	2100      	movs	r1, #0
 80017e6:	5499      	strb	r1, [r3, r2]
			rcv_intpt_flag = 1;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_UART_RxCpltCallback+0xa4>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <HAL_UART_RxCpltCallback+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40011000 	.word	0x40011000
 8001800:	20000080 	.word	0x20000080
 8001804:	40011400 	.word	0x40011400
 8001808:	20000090 	.word	0x20000090
 800180c:	2000008f 	.word	0x2000008f
 8001810:	2000008c 	.word	0x2000008c
 8001814:	200002a4 	.word	0x200002a4
 8001818:	200002ef 	.word	0x200002ef

0800181c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin ==RPM_TICK_Pin){
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d104      	bne.n	8001836 <HAL_GPIO_EXTI_Callback+0x1a>
		rpm_tick_count +=1;
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_GPIO_EXTI_Callback+0x28>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <HAL_GPIO_EXTI_Callback+0x28>)
 8001834:	6013      	str	r3, [r2, #0]
	}
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000084 	.word	0x20000084

08001848 <DIGITS_Display>:
void DIGITS_Display(uint8_t DIGIT_A, uint8_t DIGIT_B)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	@ 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	 uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	 int Abit0 = (DIGITA_VAL ) & 1;  	// extract Abit0 of the 4-bit value
 8001862:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
	 int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
 800186c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
	 int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
 800187a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	623b      	str	r3, [r7, #32]
	 int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value
 8001888:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800188c:	08db      	lsrs	r3, r3, #3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	61fb      	str	r3, [r7, #28]

	 uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	76fb      	strb	r3, [r7, #27]
	 int Bbit0 = (DIGITB_VAL ) & 1;  	// extract Bbit0 of the 4-bit value
 800189e:	7efb      	ldrb	r3, [r7, #27]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
	 int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
 80018a6:	7efb      	ldrb	r3, [r7, #27]
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	613b      	str	r3, [r7, #16]
	 int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
 80018b2:	7efb      	ldrb	r3, [r7, #27]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
	 int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value
 80018be:	7efb      	ldrb	r3, [r7, #27]
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]

	 if (Abit0 == (0))
 80018ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d106      	bne.n	80018de <DIGITS_Display+0x96>
	 {
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018d6:	483b      	ldr	r0, [pc, #236]	@ (80019c4 <DIGITS_Display+0x17c>)
 80018d8:	f001 fc48 	bl	800316c <HAL_GPIO_WritePin>
 80018dc:	e005      	b.n	80018ea <DIGITS_Display+0xa2>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A0_Pin, GPIO_PIN_SET);
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018e4:	4837      	ldr	r0, [pc, #220]	@ (80019c4 <DIGITS_Display+0x17c>)
 80018e6:	f001 fc41 	bl	800316c <HAL_GPIO_WritePin>

	 }
	 if (Abit1 == (0))
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d106      	bne.n	80018fe <DIGITS_Display+0xb6>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f6:	4834      	ldr	r0, [pc, #208]	@ (80019c8 <DIGITS_Display+0x180>)
 80018f8:	f001 fc38 	bl	800316c <HAL_GPIO_WritePin>
 80018fc:	e005      	b.n	800190a <DIGITS_Display+0xc2>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001904:	4830      	ldr	r0, [pc, #192]	@ (80019c8 <DIGITS_Display+0x180>)
 8001906:	f001 fc31 	bl	800316c <HAL_GPIO_WritePin>

	 }
	 if (Abit2 == (0))
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <DIGITS_Display+0xd6>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001916:	482c      	ldr	r0, [pc, #176]	@ (80019c8 <DIGITS_Display+0x180>)
 8001918:	f001 fc28 	bl	800316c <HAL_GPIO_WritePin>
 800191c:	e005      	b.n	800192a <DIGITS_Display+0xe2>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001924:	4828      	ldr	r0, [pc, #160]	@ (80019c8 <DIGITS_Display+0x180>)
 8001926:	f001 fc21 	bl	800316c <HAL_GPIO_WritePin>

	 }
	 if (Abit3 == (0))
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d106      	bne.n	800193e <DIGITS_Display+0xf6>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001936:	4824      	ldr	r0, [pc, #144]	@ (80019c8 <DIGITS_Display+0x180>)
 8001938:	f001 fc18 	bl	800316c <HAL_GPIO_WritePin>
 800193c:	e005      	b.n	800194a <DIGITS_Display+0x102>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A3_Pin, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001944:	4820      	ldr	r0, [pc, #128]	@ (80019c8 <DIGITS_Display+0x180>)
 8001946:	f001 fc11 	bl	800316c <HAL_GPIO_WritePin>

	 }


	 if (Bbit0 == (0))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <DIGITS_Display+0x114>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	2101      	movs	r1, #1
 8001954:	481c      	ldr	r0, [pc, #112]	@ (80019c8 <DIGITS_Display+0x180>)
 8001956:	f001 fc09 	bl	800316c <HAL_GPIO_WritePin>
 800195a:	e004      	b.n	8001966 <DIGITS_Display+0x11e>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2101      	movs	r1, #1
 8001960:	4819      	ldr	r0, [pc, #100]	@ (80019c8 <DIGITS_Display+0x180>)
 8001962:	f001 fc03 	bl	800316c <HAL_GPIO_WritePin>

	 }
	 if (Bbit1 == (0))
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <DIGITS_Display+0x130>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2108      	movs	r1, #8
 8001970:	4815      	ldr	r0, [pc, #84]	@ (80019c8 <DIGITS_Display+0x180>)
 8001972:	f001 fbfb 	bl	800316c <HAL_GPIO_WritePin>
 8001976:	e004      	b.n	8001982 <DIGITS_Display+0x13a>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	2108      	movs	r1, #8
 800197c:	4812      	ldr	r0, [pc, #72]	@ (80019c8 <DIGITS_Display+0x180>)
 800197e:	f001 fbf5 	bl	800316c <HAL_GPIO_WritePin>

	 }
	 if (Bbit2 == (0))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <DIGITS_Display+0x14c>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2102      	movs	r1, #2
 800198c:	480e      	ldr	r0, [pc, #56]	@ (80019c8 <DIGITS_Display+0x180>)
 800198e:	f001 fbed 	bl	800316c <HAL_GPIO_WritePin>
 8001992:	e004      	b.n	800199e <DIGITS_Display+0x156>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2102      	movs	r1, #2
 8001998:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <DIGITS_Display+0x180>)
 800199a:	f001 fbe7 	bl	800316c <HAL_GPIO_WritePin>

	 }
	 if (Bbit3 == (0))
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <DIGITS_Display+0x168>
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2104      	movs	r1, #4
 80019a8:	4807      	ldr	r0, [pc, #28]	@ (80019c8 <DIGITS_Display+0x180>)
 80019aa:	f001 fbdf 	bl	800316c <HAL_GPIO_WritePin>
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);

	 }
}
 80019ae:	e004      	b.n	80019ba <DIGITS_Display+0x172>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2104      	movs	r1, #4
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <DIGITS_Display+0x180>)
 80019b6:	f001 fbd9 	bl	800316c <HAL_GPIO_WritePin>
}
 80019ba:	bf00      	nop
 80019bc:	3730      	adds	r7, #48	@ 0x30
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020800 	.word	0x40020800

080019cc <Set_Pipe>:
void Set_Pipe(int location){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	//if inlet
	if(location == 0){
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <Set_Pipe+0x3c>
		//purple
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	2101      	movs	r1, #1
 80019de:	4833      	ldr	r0, [pc, #204]	@ (8001aac <Set_Pipe+0xe0>)
 80019e0:	f001 fbc4 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2180      	movs	r1, #128	@ 0x80
 80019e8:	4830      	ldr	r0, [pc, #192]	@ (8001aac <Set_Pipe+0xe0>)
 80019ea:	f001 fbbf 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2102      	movs	r1, #2
 80019f2:	482f      	ldr	r0, [pc, #188]	@ (8001ab0 <Set_Pipe+0xe4>)
 80019f4:	f001 fbba 	bl	800316c <HAL_GPIO_WritePin>
    //default position
		TIM2->CCR1 = 2000;
 80019f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019fc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a00:	635a      	str	r2, [r3, #52]	@ 0x34
    zone = 0;
 8001a02:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <Set_Pipe+0xe8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
	}
	//if outlet 1
	if(location == 1){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d116      	bne.n	8001a3c <Set_Pipe+0x70>
		//red
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2101      	movs	r1, #1
 8001a12:	4826      	ldr	r0, [pc, #152]	@ (8001aac <Set_Pipe+0xe0>)
 8001a14:	f001 fbaa 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2180      	movs	r1, #128	@ 0x80
 8001a1c:	4823      	ldr	r0, [pc, #140]	@ (8001aac <Set_Pipe+0xe0>)
 8001a1e:	f001 fba5 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2102      	movs	r1, #2
 8001a26:	4822      	ldr	r0, [pc, #136]	@ (8001ab0 <Set_Pipe+0xe4>)
 8001a28:	f001 fba0 	bl	800316c <HAL_GPIO_WritePin>
    //45 degrees
		TIM2->CCR1 = 500;
 8001a2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a30:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a34:	635a      	str	r2, [r3, #52]	@ 0x34
    zone = 1;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <Set_Pipe+0xe8>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
	}
	//if outlet 2
	if(location == 2){
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d116      	bne.n	8001a70 <Set_Pipe+0xa4>
		//green
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2101      	movs	r1, #1
 8001a46:	4819      	ldr	r0, [pc, #100]	@ (8001aac <Set_Pipe+0xe0>)
 8001a48:	f001 fb90 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2180      	movs	r1, #128	@ 0x80
 8001a50:	4816      	ldr	r0, [pc, #88]	@ (8001aac <Set_Pipe+0xe0>)
 8001a52:	f001 fb8b 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4815      	ldr	r0, [pc, #84]	@ (8001ab0 <Set_Pipe+0xe4>)
 8001a5c:	f001 fb86 	bl	800316c <HAL_GPIO_WritePin>
    //90 degress
		TIM2->CCR1 = 1000;
 8001a60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a68:	635a      	str	r2, [r3, #52]	@ 0x34
    zone = 2;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <Set_Pipe+0xe8>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	701a      	strb	r2, [r3, #0]
  }
	//if outlet 3
	if(location == 3){
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d116      	bne.n	8001aa4 <Set_Pipe+0xd8>
		//blue
		HAL_GPIO_WritePin(GPIOB, BLU_Pin, GPIO_PIN_SET);
 8001a76:	2201      	movs	r2, #1
 8001a78:	2101      	movs	r1, #1
 8001a7a:	480c      	ldr	r0, [pc, #48]	@ (8001aac <Set_Pipe+0xe0>)
 8001a7c:	f001 fb76 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2180      	movs	r1, #128	@ 0x80
 8001a84:	4809      	ldr	r0, [pc, #36]	@ (8001aac <Set_Pipe+0xe0>)
 8001a86:	f001 fb71 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <Set_Pipe+0xe4>)
 8001a90:	f001 fb6c 	bl	800316c <HAL_GPIO_WritePin>
    //135 degrees
		TIM2->CCR1 = 1500;
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a98:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001a9c:	635a      	str	r2, [r3, #52]	@ 0x34
    zone = 3;
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <Set_Pipe+0xe8>)
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	701a      	strb	r2, [r3, #0]
	}
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	200000e8 	.word	0x200000e8

08001ab8 <Set_Motor>:

void Set_Motor(int direction, int speed){
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]

  //*inlet moves motor in reverse
  if(direction == 0){
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d120      	bne.n	8001b0a <Set_Motor+0x52>
    if(speed == 1){
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <Set_Motor+0x26>
      TIM3->CCR3 = 1400; // 70% of 60k
 8001ace:	4b22      	ldr	r3, [pc, #136]	@ (8001b58 <Set_Motor+0xa0>)
 8001ad0:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8001ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
      percent_pwm = 70;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <Set_Motor+0xa4>)
 8001ad8:	2246      	movs	r2, #70	@ 0x46
 8001ada:	701a      	strb	r2, [r3, #0]
    else if(speed == 3){
      TIM3->CCR1 = 1980; // 99% of 60k
      percent_pwm = 99;
    }
  }
}
 8001adc:	e035      	b.n	8001b4a <Set_Motor+0x92>
    else if(speed == 2){
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d107      	bne.n	8001af4 <Set_Motor+0x3c>
      TIM3->CCR3 = 1700; // 85% of 60k
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <Set_Motor+0xa0>)
 8001ae6:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001aea:	63da      	str	r2, [r3, #60]	@ 0x3c
      percent_pwm = 85;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <Set_Motor+0xa4>)
 8001aee:	2255      	movs	r2, #85	@ 0x55
 8001af0:	701a      	strb	r2, [r3, #0]
}
 8001af2:	e02a      	b.n	8001b4a <Set_Motor+0x92>
    else if(speed == 3){
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d127      	bne.n	8001b4a <Set_Motor+0x92>
      TIM3->CCR3 = 1980; // 99% of 60k
 8001afa:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <Set_Motor+0xa0>)
 8001afc:	f240 72bc 	movw	r2, #1980	@ 0x7bc
 8001b00:	63da      	str	r2, [r3, #60]	@ 0x3c
      percent_pwm = 99;
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <Set_Motor+0xa4>)
 8001b04:	2263      	movs	r2, #99	@ 0x63
 8001b06:	701a      	strb	r2, [r3, #0]
}
 8001b08:	e01f      	b.n	8001b4a <Set_Motor+0x92>
    if(speed == 1){
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d107      	bne.n	8001b20 <Set_Motor+0x68>
      TIM3->CCR1 = 1400; // 70% of 60k
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <Set_Motor+0xa0>)
 8001b12:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8001b16:	635a      	str	r2, [r3, #52]	@ 0x34
      percent_pwm = 70;
 8001b18:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <Set_Motor+0xa4>)
 8001b1a:	2246      	movs	r2, #70	@ 0x46
 8001b1c:	701a      	strb	r2, [r3, #0]
}
 8001b1e:	e014      	b.n	8001b4a <Set_Motor+0x92>
    else if(speed == 2){
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d107      	bne.n	8001b36 <Set_Motor+0x7e>
      TIM3->CCR1 = 1700; // 85% of 60k
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <Set_Motor+0xa0>)
 8001b28:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001b2c:	635a      	str	r2, [r3, #52]	@ 0x34
      percent_pwm = 85;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <Set_Motor+0xa4>)
 8001b30:	2255      	movs	r2, #85	@ 0x55
 8001b32:	701a      	strb	r2, [r3, #0]
}
 8001b34:	e009      	b.n	8001b4a <Set_Motor+0x92>
    else if(speed == 3){
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d106      	bne.n	8001b4a <Set_Motor+0x92>
      TIM3->CCR1 = 1980; // 99% of 60k
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <Set_Motor+0xa0>)
 8001b3e:	f240 72bc 	movw	r2, #1980	@ 0x7bc
 8001b42:	635a      	str	r2, [r3, #52]	@ 0x34
      percent_pwm = 99;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <Set_Motor+0xa4>)
 8001b46:	2263      	movs	r2, #99	@ 0x63
 8001b48:	701a      	strb	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	200000e0 	.word	0x200000e0

08001b60 <Hourly_Report>:
void Hourly_Report(){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af02      	add	r7, sp, #8
  
  sprintf((char*) txd_msg_buffer, "Time %d:%d | Zone %d | Motor Speed %d%%", clock_hours, clock_mins, zone, percent_pwm);
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <Hourly_Report+0x74>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <Hourly_Report+0x78>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <Hourly_Report+0x7c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <Hourly_Report+0x80>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	9200      	str	r2, [sp, #0]
 8001b84:	4603      	mov	r3, r0
 8001b86:	460a      	mov	r2, r1
 8001b88:	4916      	ldr	r1, [pc, #88]	@ (8001be4 <Hourly_Report+0x84>)
 8001b8a:	4817      	ldr	r0, [pc, #92]	@ (8001be8 <Hourly_Report+0x88>)
 8001b8c:	f004 f8b8 	bl	8005d00 <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer,strlen((char*) txd_msg_buffer), 1000);
 8001b90:	4815      	ldr	r0, [pc, #84]	@ (8001be8 <Hourly_Report+0x88>)
 8001b92:	f7fe fb25 	bl	80001e0 <strlen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9e:	4912      	ldr	r1, [pc, #72]	@ (8001be8 <Hourly_Report+0x88>)
 8001ba0:	4812      	ldr	r0, [pc, #72]	@ (8001bec <Hourly_Report+0x8c>)
 8001ba2:	f003 f81f 	bl	8004be4 <HAL_UART_Transmit>
  sprintf((char*) txd_msg_buffer, "| Motor RPM %d | Water Depth %d%% \r\n", rpm_p, distance);
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <Hourly_Report+0x90>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <Hourly_Report+0x94>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4911      	ldr	r1, [pc, #68]	@ (8001bf8 <Hourly_Report+0x98>)
 8001bb2:	480d      	ldr	r0, [pc, #52]	@ (8001be8 <Hourly_Report+0x88>)
 8001bb4:	f004 f8a4 	bl	8005d00 <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer,strlen((char*) txd_msg_buffer), 1000);
 8001bb8:	480b      	ldr	r0, [pc, #44]	@ (8001be8 <Hourly_Report+0x88>)
 8001bba:	f7fe fb11 	bl	80001e0 <strlen>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc6:	4908      	ldr	r1, [pc, #32]	@ (8001be8 <Hourly_Report+0x88>)
 8001bc8:	4808      	ldr	r0, [pc, #32]	@ (8001bec <Hourly_Report+0x8c>)
 8001bca:	f003 f80b 	bl	8004be4 <HAL_UART_Transmit>

}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200002ec 	.word	0x200002ec
 8001bd8:	200002ed 	.word	0x200002ed
 8001bdc:	200000e8 	.word	0x200000e8
 8001be0:	200000e0 	.word	0x200000e0
 8001be4:	08006970 	.word	0x08006970
 8001be8:	20000094 	.word	0x20000094
 8001bec:	200002a4 	.word	0x200002a4
 8001bf0:	200000d8 	.word	0x200000d8
 8001bf4:	2000007e 	.word	0x2000007e
 8001bf8:	08006998 	.word	0x08006998

08001bfc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	if((htim->Instance == TIM5)){
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d132      	bne.n	8001c74 <HAL_TIM_PeriodElapsedCallback+0x78>
		wall_clock_hr_update_flag = 0; // screen updates occur hourly on the half-hour
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
		clock_secs += 1;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001c20:	701a      	strb	r2, [r3, #0]
		if((clock_secs == 60)){
 8001c22:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c2a:	d111      	bne.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0x54>
			clock_mins += 1;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c38:	701a      	strb	r2, [r3, #0]
			clock_secs = 0;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
			if(clock_mins == 15){
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b0f      	cmp	r3, #15
 8001c48:	d102      	bne.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0x54>
				halftime = 1;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
			}
		}
		if((clock_mins == 60 )){
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c58:	d109      	bne.n	8001c6e <HAL_TIM_PeriodElapsedCallback+0x72>
			clock_hours += 1;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c66:	701a      	strb	r2, [r3, #0]
			clock_mins = 0;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
			//new_hour = 1;
		}
		wall_clock_hr_update_flag = 1; // screen updates occur hourly on the hour
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
	}
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40000c00 	.word	0x40000c00
 8001c84:	20000088 	.word	0x20000088
 8001c88:	200002ee 	.word	0x200002ee
 8001c8c:	200002ed 	.word	0x200002ed
 8001c90:	200000dc 	.word	0x200000dc
 8001c94:	200002ec 	.word	0x200002ec

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <Error_Handler+0x8>

08001ca4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	4a08      	ldr	r2, [pc, #32]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ce2:	2007      	movs	r0, #7
 8001ce4:	f000 ffd2 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a17      	ldr	r2, [pc, #92]	@ (8001d70 <HAL_ADC_MspInit+0x7c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d127      	bne.n	8001d66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b16      	ldr	r3, [pc, #88]	@ (8001d74 <HAL_ADC_MspInit+0x80>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	4a15      	ldr	r2, [pc, #84]	@ (8001d74 <HAL_ADC_MspInit+0x80>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d26:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <HAL_ADC_MspInit+0x80>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <HAL_ADC_MspInit+0x80>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d74 <HAL_ADC_MspInit+0x80>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <HAL_ADC_MspInit+0x80>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d4e:	2310      	movs	r3, #16
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d52:	2303      	movs	r3, #3
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <HAL_ADC_MspInit+0x84>)
 8001d62:	f001 f867 	bl	8002e34 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	@ 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40012000 	.word	0x40012000
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000

08001d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8c:	d10e      	bne.n	8001dac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b16      	ldr	r3, [pc, #88]	@ (8001dec <HAL_TIM_Base_MspInit+0x70>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a15      	ldr	r2, [pc, #84]	@ (8001dec <HAL_TIM_Base_MspInit+0x70>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <HAL_TIM_Base_MspInit+0x70>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001daa:	e01a      	b.n	8001de2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0f      	ldr	r2, [pc, #60]	@ (8001df0 <HAL_TIM_Base_MspInit+0x74>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d115      	bne.n	8001de2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <HAL_TIM_Base_MspInit+0x70>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <HAL_TIM_Base_MspInit+0x70>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc6:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <HAL_TIM_Base_MspInit+0x70>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2032      	movs	r0, #50	@ 0x32
 8001dd8:	f000 ff63 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ddc:	2032      	movs	r0, #50	@ 0x32
 8001dde:	f000 ff7c 	bl	8002cda <HAL_NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40000c00 	.word	0x40000c00

08001df4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10d      	bne.n	8001e22 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_TIM_PWM_MspInit+0x40>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	4a09      	ldr	r2, [pc, #36]	@ (8001e34 <HAL_TIM_PWM_MspInit+0x40>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e16:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <HAL_TIM_PWM_MspInit+0x40>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e58:	d11e      	bne.n	8001e98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b31      	ldr	r3, [pc, #196]	@ (8001f24 <HAL_TIM_MspPostInit+0xec>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a30      	ldr	r2, [pc, #192]	@ (8001f24 <HAL_TIM_MspPostInit+0xec>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f24 <HAL_TIM_MspPostInit+0xec>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e76:	2301      	movs	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e86:	2301      	movs	r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4825      	ldr	r0, [pc, #148]	@ (8001f28 <HAL_TIM_MspPostInit+0xf0>)
 8001e92:	f000 ffcf 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e96:	e041      	b.n	8001f1c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a23      	ldr	r2, [pc, #140]	@ (8001f2c <HAL_TIM_MspPostInit+0xf4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d13c      	bne.n	8001f1c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <HAL_TIM_MspPostInit+0xec>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8001f24 <HAL_TIM_MspPostInit+0xec>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <HAL_TIM_MspPostInit+0xec>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <HAL_TIM_MspPostInit+0xec>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <HAL_TIM_MspPostInit+0xec>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <HAL_TIM_MspPostInit+0xec>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eea:	2302      	movs	r3, #2
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <HAL_TIM_MspPostInit+0xf0>)
 8001ef6:	f000 ff9d 	bl	8002e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001efa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	4806      	ldr	r0, [pc, #24]	@ (8001f30 <HAL_TIM_MspPostInit+0xf8>)
 8001f18:	f000 ff8c 	bl	8002e34 <HAL_GPIO_Init>
}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	@ 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40020800 	.word	0x40020800

08001f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08e      	sub	sp, #56	@ 0x38
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a54      	ldr	r2, [pc, #336]	@ (80020a4 <HAL_UART_MspInit+0x170>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d135      	bne.n	8001fc2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
 8001f5a:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	4a52      	ldr	r2, [pc, #328]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f66:	4b50      	ldr	r3, [pc, #320]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	4b4c      	ldr	r3, [pc, #304]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	4a4b      	ldr	r2, [pc, #300]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f82:	4b49      	ldr	r3, [pc, #292]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4840      	ldr	r0, [pc, #256]	@ (80020ac <HAL_UART_MspInit+0x178>)
 8001fac:	f000 ff42 	bl	8002e34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2025      	movs	r0, #37	@ 0x25
 8001fb6:	f000 fe74 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fba:	2025      	movs	r0, #37	@ 0x25
 8001fbc:	f000 fe8d 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fc0:	e06b      	b.n	800209a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80020b0 <HAL_UART_MspInit+0x17c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d12c      	bne.n	8002026 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	4a34      	ldr	r2, [pc, #208]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fdc:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	4b2e      	ldr	r3, [pc, #184]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002004:	230c      	movs	r3, #12
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002014:	2307      	movs	r3, #7
 8002016:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201c:	4619      	mov	r1, r3
 800201e:	4823      	ldr	r0, [pc, #140]	@ (80020ac <HAL_UART_MspInit+0x178>)
 8002020:	f000 ff08 	bl	8002e34 <HAL_GPIO_Init>
}
 8002024:	e039      	b.n	800209a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a22      	ldr	r2, [pc, #136]	@ (80020b4 <HAL_UART_MspInit+0x180>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d134      	bne.n	800209a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	4b1c      	ldr	r3, [pc, #112]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8002036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002038:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002040:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6313      	str	r3, [r2, #48]	@ 0x30
 800205c:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_UART_MspInit+0x174>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002068:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800207a:	2308      	movs	r3, #8
 800207c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002082:	4619      	mov	r1, r3
 8002084:	4809      	ldr	r0, [pc, #36]	@ (80020ac <HAL_UART_MspInit+0x178>)
 8002086:	f000 fed5 	bl	8002e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2047      	movs	r0, #71	@ 0x47
 8002090:	f000 fe07 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002094:	2047      	movs	r0, #71	@ 0x47
 8002096:	f000 fe20 	bl	8002cda <HAL_NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3738      	adds	r7, #56	@ 0x38
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40004400 	.word	0x40004400
 80020b4:	40011400 	.word	0x40011400

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <NMI_Handler+0x4>

080020c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <MemManage_Handler+0x4>

080020d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <UsageFault_Handler+0x4>

080020e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210e:	f000 f8eb 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}

08002116 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 800211a:	2004      	movs	r0, #4
 800211c:	f001 f85a 	bl	80031d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <USART1_IRQHandler+0x10>)
 800212a:	f002 fe0b 	bl	8004d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000214 	.word	0x20000214

08002138 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <TIM5_IRQHandler+0x10>)
 800213e:	f001 ff05 	bl	8003f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200001cc 	.word	0x200001cc

0800214c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002150:	4802      	ldr	r0, [pc, #8]	@ (800215c <USART6_IRQHandler+0x10>)
 8002152:	f002 fdf7 	bl	8004d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200002a4 	.word	0x200002a4

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	@ (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f003 fdde 	bl	8005d50 <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20018000 	.word	0x20018000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	200002f0 	.word	0x200002f0
 80021c8:	20000440 	.word	0x20000440

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002228 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021f4:	f7ff ffea 	bl	80021cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	@ (800222c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	@ (8002230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	@ (800223c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800221e:	f003 fd9d 	bl	8005d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002222:	f7fe f9cd 	bl	80005c0 <main>
  bx  lr    
 8002226:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002228:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002234:	08006b1c 	.word	0x08006b1c
  ldr r2, =_sbss
 8002238:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800223c:	20000440 	.word	0x20000440

08002240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <HAL_Init+0x40>)
 800224e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_Init+0x40>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800225e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	@ (8002284 <HAL_Init+0x40>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 fd0d 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fd14 	bl	8001ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fd25 	bl	8002cf6 <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 fced 	bl	8002ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	@ (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000004 	.word	0x20000004
 80022e0:	2000000c 	.word	0x2000000c
 80022e4:	20000008 	.word	0x20000008

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	2000000c 	.word	0x2000000c
 800230c:	200002f4 	.word	0x200002f4

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200002f4 	.word	0x200002f4

08002328 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e033      	b.n	80023a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fcd4 	bl	8001cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800236e:	f023 0302 	bic.w	r3, r3, #2
 8002372:	f043 0202 	orr.w	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 faba 	bl	80028f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40
 8002396:	e001      	b.n	800239c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Start+0x1a>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e097      	b.n	80024fa <HAL_ADC_Start+0x14a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d018      	beq.n	8002412 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023f0:	4b45      	ldr	r3, [pc, #276]	@ (8002508 <HAL_ADC_Start+0x158>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a45      	ldr	r2, [pc, #276]	@ (800250c <HAL_ADC_Start+0x15c>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0c9a      	lsrs	r2, r3, #18
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002404:	e002      	b.n	800240c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f9      	bne.n	8002406 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d15f      	bne.n	80024e0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800244a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800245a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800245e:	d106      	bne.n	800246e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002464:	f023 0206 	bic.w	r2, r3, #6
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	645a      	str	r2, [r3, #68]	@ 0x44
 800246c:	e002      	b.n	8002474 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800247c:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <HAL_ADC_Start+0x160>)
 800247e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002488:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d129      	bne.n	80024f8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e020      	b.n	80024f8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <HAL_ADC_Start+0x164>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d11b      	bne.n	80024f8 <HAL_ADC_Start+0x148>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d114      	bne.n	80024f8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	e00b      	b.n	80024f8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	f043 0210 	orr.w	r2, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000004 	.word	0x20000004
 800250c:	431bde83 	.word	0x431bde83
 8002510:	40012300 	.word	0x40012300
 8002514:	40012000 	.word	0x40012000

08002518 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADC_Stop+0x16>
 800252a:	2302      	movs	r3, #2
 800252c:	e021      	b.n	8002572 <HAL_ADC_Stop+0x5a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259a:	d113      	bne.n	80025c4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025aa:	d10b      	bne.n	80025c4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f043 0220 	orr.w	r2, r3, #32
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e063      	b.n	800268c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c4:	f7ff fea4 	bl	8002310 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025ca:	e021      	b.n	8002610 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d01d      	beq.n	8002610 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_ADC_PollForConversion+0x6c>
 80025da:	f7ff fe99 	bl	8002310 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d212      	bcs.n	8002610 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d00b      	beq.n	8002610 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	f043 0204 	orr.w	r2, r3, #4
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e03d      	b.n	800268c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d1d6      	bne.n	80025cc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f06f 0212 	mvn.w	r2, #18
 8002626:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d123      	bne.n	800268a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002646:	2b00      	cmp	r3, #0
 8002648:	d11f      	bne.n	800268a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002662:	2b00      	cmp	r3, #0
 8002664:	d111      	bne.n	800268a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1c>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e105      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x228>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b09      	cmp	r3, #9
 80026da:	d925      	bls.n	8002728 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68d9      	ldr	r1, [r3, #12]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68d9      	ldr	r1, [r3, #12]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	4603      	mov	r3, r0
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4403      	add	r3, r0
 800271a:	3b1e      	subs	r3, #30
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	e022      	b.n	800276e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	2207      	movs	r2, #7
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	4603      	mov	r3, r0
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4403      	add	r3, r0
 8002764:	409a      	lsls	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d824      	bhi.n	80027c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b05      	subs	r3, #5
 8002788:	221f      	movs	r2, #31
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	400a      	ands	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b05      	subs	r3, #5
 80027b2:	fa00 f203 	lsl.w	r2, r0, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80027be:	e04c      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d824      	bhi.n	8002812 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b23      	subs	r3, #35	@ 0x23
 80027da:	221f      	movs	r2, #31
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b23      	subs	r3, #35	@ 0x23
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002810:	e023      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b41      	subs	r3, #65	@ 0x41
 8002824:	221f      	movs	r2, #31
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	400a      	ands	r2, r1
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b41      	subs	r3, #65	@ 0x41
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800285a:	4b22      	ldr	r3, [pc, #136]	@ (80028e4 <HAL_ADC_ConfigChannel+0x234>)
 800285c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a21      	ldr	r2, [pc, #132]	@ (80028e8 <HAL_ADC_ConfigChannel+0x238>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d109      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1cc>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b12      	cmp	r3, #18
 800286e:	d105      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a19      	ldr	r2, [pc, #100]	@ (80028e8 <HAL_ADC_ConfigChannel+0x238>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d123      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x21e>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b10      	cmp	r3, #16
 800288c:	d003      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x1e6>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b11      	cmp	r3, #17
 8002894:	d11b      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d111      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_ADC_ConfigChannel+0x23c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a10      	ldr	r2, [pc, #64]	@ (80028f0 <HAL_ADC_ConfigChannel+0x240>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	0c9a      	lsrs	r2, r3, #18
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40012300 	.word	0x40012300
 80028e8:	40012000 	.word	0x40012000
 80028ec:	20000004 	.word	0x20000004
 80028f0:	431bde83 	.word	0x431bde83

080028f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fc:	4b79      	ldr	r3, [pc, #484]	@ (8002ae4 <ADC_Init+0x1f0>)
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800294c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800296e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	4a58      	ldr	r2, [pc, #352]	@ (8002ae8 <ADC_Init+0x1f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800299a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6899      	ldr	r1, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e00f      	b.n	80029f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0202 	bic.w	r2, r2, #2
 8002a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7e1b      	ldrb	r3, [r3, #24]
 8002a0c:	005a      	lsls	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a2e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	035a      	lsls	r2, r3, #13
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e007      	b.n	8002a68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a66:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	051a      	lsls	r2, r3, #20
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aaa:	025a      	lsls	r2, r3, #9
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	029a      	lsls	r2, r3, #10
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	0f000001 	.word	0x0f000001

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	@ (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4907      	ldr	r1, [pc, #28]	@ (8002b88 <__NVIC_EnableIRQ+0x38>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	@ (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	@ (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2304      	movcs	r3, #4
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b03      	subs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f7ff ff8e 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff29 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb4:	f7ff ff3e 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff8e 	bl	8002be0 <NVIC_EncodePriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff5d 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff31 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffa2 	bl	8002c48 <SysTick_Config>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff faf8 	bl	8002310 <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d008      	beq.n	8002d40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2280      	movs	r2, #128	@ 0x80
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e052      	b.n	8002de6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0216 	bic.w	r2, r2, #22
 8002d4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <HAL_DMA_Abort+0x62>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0208 	bic.w	r2, r2, #8
 8002d7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d90:	e013      	b.n	8002dba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d92:	f7ff fabd 	bl	8002310 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d90c      	bls.n	8002dba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2203      	movs	r2, #3
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e015      	b.n	8002de6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e4      	bne.n	8002d92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dcc:	223f      	movs	r2, #63	@ 0x3f
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d004      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2280      	movs	r2, #128	@ 0x80
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e00c      	b.n	8002e26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2205      	movs	r2, #5
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	@ 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	e159      	b.n	8003104 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e50:	2201      	movs	r2, #1
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	f040 8148 	bne.w	80030fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d005      	beq.n	8002e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d130      	bne.n	8002ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2203      	movs	r2, #3
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 0201 	and.w	r2, r3, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d017      	beq.n	8002f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2203      	movs	r2, #3
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d123      	bne.n	8002f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	08da      	lsrs	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	220f      	movs	r2, #15
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	08da      	lsrs	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3208      	adds	r2, #8
 8002f72:	69b9      	ldr	r1, [r7, #24]
 8002f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0203 	and.w	r2, r3, #3
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a2 	beq.w	80030fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	4b57      	ldr	r3, [pc, #348]	@ (800311c <HAL_GPIO_Init+0x2e8>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	4a56      	ldr	r2, [pc, #344]	@ (800311c <HAL_GPIO_Init+0x2e8>)
 8002fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fca:	4b54      	ldr	r3, [pc, #336]	@ (800311c <HAL_GPIO_Init+0x2e8>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fd6:	4a52      	ldr	r2, [pc, #328]	@ (8003120 <HAL_GPIO_Init+0x2ec>)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	3302      	adds	r3, #2
 8002fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	220f      	movs	r2, #15
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a49      	ldr	r2, [pc, #292]	@ (8003124 <HAL_GPIO_Init+0x2f0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d019      	beq.n	8003036 <HAL_GPIO_Init+0x202>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a48      	ldr	r2, [pc, #288]	@ (8003128 <HAL_GPIO_Init+0x2f4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_GPIO_Init+0x1fe>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a47      	ldr	r2, [pc, #284]	@ (800312c <HAL_GPIO_Init+0x2f8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00d      	beq.n	800302e <HAL_GPIO_Init+0x1fa>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a46      	ldr	r2, [pc, #280]	@ (8003130 <HAL_GPIO_Init+0x2fc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <HAL_GPIO_Init+0x1f6>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a45      	ldr	r2, [pc, #276]	@ (8003134 <HAL_GPIO_Init+0x300>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_GPIO_Init+0x1f2>
 8003022:	2304      	movs	r3, #4
 8003024:	e008      	b.n	8003038 <HAL_GPIO_Init+0x204>
 8003026:	2307      	movs	r3, #7
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x204>
 800302a:	2303      	movs	r3, #3
 800302c:	e004      	b.n	8003038 <HAL_GPIO_Init+0x204>
 800302e:	2302      	movs	r3, #2
 8003030:	e002      	b.n	8003038 <HAL_GPIO_Init+0x204>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x204>
 8003036:	2300      	movs	r3, #0
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f002 0203 	and.w	r2, r2, #3
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	4093      	lsls	r3, r2
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003048:	4935      	ldr	r1, [pc, #212]	@ (8003120 <HAL_GPIO_Init+0x2ec>)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003056:	4b38      	ldr	r3, [pc, #224]	@ (8003138 <HAL_GPIO_Init+0x304>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307a:	4a2f      	ldr	r2, [pc, #188]	@ (8003138 <HAL_GPIO_Init+0x304>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003080:	4b2d      	ldr	r3, [pc, #180]	@ (8003138 <HAL_GPIO_Init+0x304>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a4:	4a24      	ldr	r2, [pc, #144]	@ (8003138 <HAL_GPIO_Init+0x304>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030aa:	4b23      	ldr	r3, [pc, #140]	@ (8003138 <HAL_GPIO_Init+0x304>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <HAL_GPIO_Init+0x304>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d4:	4b18      	ldr	r3, [pc, #96]	@ (8003138 <HAL_GPIO_Init+0x304>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003138 <HAL_GPIO_Init+0x304>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	f67f aea2 	bls.w	8002e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3724      	adds	r7, #36	@ 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40013800 	.word	0x40013800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40020800 	.word	0x40020800
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40021000 	.word	0x40021000
 8003138:	40013c00 	.word	0x40013c00

0800313c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e001      	b.n	800315e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031b0:	887a      	ldrh	r2, [r7, #2]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	041a      	lsls	r2, r3, #16
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	400b      	ands	r3, r1
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	619a      	str	r2, [r3, #24]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ea:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fb12 	bl	800181c <HAL_GPIO_EXTI_Callback>
  }
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e267      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d075      	beq.n	800330e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003222:	4b88      	ldr	r3, [pc, #544]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d00c      	beq.n	8003248 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322e:	4b85      	ldr	r3, [pc, #532]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003236:	2b08      	cmp	r3, #8
 8003238:	d112      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323a:	4b82      	ldr	r3, [pc, #520]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	4b7e      	ldr	r3, [pc, #504]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05b      	beq.n	800330c <HAL_RCC_OscConfig+0x108>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d157      	bne.n	800330c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e242      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x74>
 800326a:	4b76      	ldr	r3, [pc, #472]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x98>
 8003282:	4b70      	ldr	r3, [pc, #448]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6f      	ldr	r2, [pc, #444]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b6d      	ldr	r3, [pc, #436]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6c      	ldr	r2, [pc, #432]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 800329c:	4b69      	ldr	r3, [pc, #420]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a68      	ldr	r2, [pc, #416]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b66      	ldr	r3, [pc, #408]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a65      	ldr	r2, [pc, #404]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7ff f828 	bl	8002310 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7ff f824 	bl	8002310 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	@ 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e207      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xc0>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7ff f814 	bl	8002310 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7ff f810 	bl	8002310 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	@ 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1f3      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b51      	ldr	r3, [pc, #324]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0xe8>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d063      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800331a:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b47      	ldr	r3, [pc, #284]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b44      	ldr	r3, [pc, #272]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b41      	ldr	r3, [pc, #260]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1c7      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b3b      	ldr	r3, [pc, #236]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4937      	ldr	r1, [pc, #220]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b34      	ldr	r3, [pc, #208]	@ (8003448 <HAL_RCC_OscConfig+0x244>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe ffc9 	bl	8002310 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe ffc5 	bl	8002310 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1a8      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b2b      	ldr	r3, [pc, #172]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4925      	ldr	r1, [pc, #148]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_RCC_OscConfig+0x244>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe ffa8 	bl	8002310 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe ffa4 	bl	8002310 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e187      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d036      	beq.n	800345c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b15      	ldr	r3, [pc, #84]	@ (800344c <HAL_RCC_OscConfig+0x248>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe ff88 	bl	8002310 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe ff84 	bl	8002310 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e167      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <HAL_RCC_OscConfig+0x240>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x200>
 8003422:	e01b      	b.n	800345c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_OscConfig+0x248>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342a:	f7fe ff71 	bl	8002310 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e00e      	b.n	8003450 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003432:	f7fe ff6d 	bl	8002310 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d907      	bls.n	8003450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e150      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
 8003444:	40023800 	.word	0x40023800
 8003448:	42470000 	.word	0x42470000
 800344c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b88      	ldr	r3, [pc, #544]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ea      	bne.n	8003432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8097 	beq.w	8003598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b81      	ldr	r3, [pc, #516]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b7d      	ldr	r3, [pc, #500]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	4a7c      	ldr	r2, [pc, #496]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	@ 0x40
 800348a:	4b7a      	ldr	r3, [pc, #488]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b77      	ldr	r3, [pc, #476]	@ (8003678 <HAL_RCC_OscConfig+0x474>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b74      	ldr	r3, [pc, #464]	@ (8003678 <HAL_RCC_OscConfig+0x474>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a73      	ldr	r2, [pc, #460]	@ (8003678 <HAL_RCC_OscConfig+0x474>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe ff2d 	bl	8002310 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe ff29 	bl	8002310 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e10c      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003678 <HAL_RCC_OscConfig+0x474>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x2ea>
 80034e0:	4b64      	ldr	r3, [pc, #400]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e4:	4a63      	ldr	r2, [pc, #396]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ec:	e01c      	b.n	8003528 <HAL_RCC_OscConfig+0x324>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x30c>
 80034f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	@ 0x70
 8003502:	4b5c      	ldr	r3, [pc, #368]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	4a5b      	ldr	r2, [pc, #364]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	@ 0x70
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0x324>
 8003510:	4b58      	ldr	r3, [pc, #352]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	4a57      	ldr	r2, [pc, #348]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	@ 0x70
 800351c:	4b55      	ldr	r3, [pc, #340]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	4a54      	ldr	r2, [pc, #336]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe feee 	bl	8002310 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe feea 	bl	8002310 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0cb      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	4b49      	ldr	r3, [pc, #292]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ee      	beq.n	8003538 <HAL_RCC_OscConfig+0x334>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fe fed8 	bl	8002310 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe fed4 	bl	8002310 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0b5      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	4b3e      	ldr	r3, [pc, #248]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ee      	bne.n	8003564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b39      	ldr	r3, [pc, #228]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	4a38      	ldr	r2, [pc, #224]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a1 	beq.w	80036e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a2:	4b34      	ldr	r3, [pc, #208]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d05c      	beq.n	8003668 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d141      	bne.n	800363a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b31      	ldr	r3, [pc, #196]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fea8 	bl	8002310 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe fea4 	bl	8002310 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e087      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b27      	ldr	r3, [pc, #156]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	491b      	ldr	r1, [pc, #108]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b1b      	ldr	r3, [pc, #108]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fe fe7d 	bl	8002310 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe fe79 	bl	8002310 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e05c      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362c:	4b11      	ldr	r3, [pc, #68]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x416>
 8003638:	e054      	b.n	80036e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	4b10      	ldr	r3, [pc, #64]	@ (800367c <HAL_RCC_OscConfig+0x478>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe fe66 	bl	8002310 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe fe62 	bl	8002310 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e045      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <HAL_RCC_OscConfig+0x470>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x444>
 8003666:	e03d      	b.n	80036e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e038      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_RCC_OscConfig+0x4ec>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d028      	beq.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d121      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d11a      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d111      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	3b01      	subs	r3, #1
 80036ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0cc      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b68      	ldr	r3, [pc, #416]	@ (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d90c      	bls.n	8003730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b65      	ldr	r3, [pc, #404]	@ (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b63      	ldr	r3, [pc, #396]	@ (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b8      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003748:	4b59      	ldr	r3, [pc, #356]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a58      	ldr	r2, [pc, #352]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003752:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003760:	4b53      	ldr	r3, [pc, #332]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a52      	ldr	r2, [pc, #328]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800376a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b50      	ldr	r3, [pc, #320]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	494d      	ldr	r1, [pc, #308]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d044      	beq.n	8003814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b47      	ldr	r3, [pc, #284]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d119      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d003      	beq.n	80037b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b2:	4b3f      	ldr	r3, [pc, #252]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e06f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	4b3b      	ldr	r3, [pc, #236]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e067      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d2:	4b37      	ldr	r3, [pc, #220]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 0203 	bic.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4934      	ldr	r1, [pc, #208]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e4:	f7fe fd94 	bl	8002310 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fe fd90 	bl	8002310 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e04f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	4b2b      	ldr	r3, [pc, #172]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 020c 	and.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	429a      	cmp	r2, r3
 8003812:	d1eb      	bne.n	80037ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003814:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d20c      	bcs.n	800383c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b20      	ldr	r3, [pc, #128]	@ (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e032      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4916      	ldr	r1, [pc, #88]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003866:	4b12      	ldr	r3, [pc, #72]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	490e      	ldr	r1, [pc, #56]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800387a:	f000 f821 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800387e:	4602      	mov	r2, r0
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	490a      	ldr	r1, [pc, #40]	@ (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	4a09      	ldr	r2, [pc, #36]	@ (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003896:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fcf4 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023c00 	.word	0x40023c00
 80038b0:	40023800 	.word	0x40023800
 80038b4:	080069c0 	.word	0x080069c0
 80038b8:	20000004 	.word	0x20000004
 80038bc:	20000008 	.word	0x20000008

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b094      	sub	sp, #80	@ 0x50
 80038c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d8:	4b79      	ldr	r3, [pc, #484]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d00d      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x40>
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	f200 80e1 	bhi.w	8003aac <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x34>
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0x3a>
 80038f2:	e0db      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b73      	ldr	r3, [pc, #460]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 80038f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038f8:	e0db      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038fa:	4b73      	ldr	r3, [pc, #460]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x208>)
 80038fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038fe:	e0d8      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003900:	4b6f      	ldr	r3, [pc, #444]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003908:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800390a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d063      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003916:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	2200      	movs	r2, #0
 800391e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003920:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003928:	633b      	str	r3, [r7, #48]	@ 0x30
 800392a:	2300      	movs	r3, #0
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
 800392e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003932:	4622      	mov	r2, r4
 8003934:	462b      	mov	r3, r5
 8003936:	f04f 0000 	mov.w	r0, #0
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	0159      	lsls	r1, r3, #5
 8003940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003944:	0150      	lsls	r0, r2, #5
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4621      	mov	r1, r4
 800394c:	1a51      	subs	r1, r2, r1
 800394e:	6139      	str	r1, [r7, #16]
 8003950:	4629      	mov	r1, r5
 8003952:	eb63 0301 	sbc.w	r3, r3, r1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003964:	4659      	mov	r1, fp
 8003966:	018b      	lsls	r3, r1, #6
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800396e:	4651      	mov	r1, sl
 8003970:	018a      	lsls	r2, r1, #6
 8003972:	4651      	mov	r1, sl
 8003974:	ebb2 0801 	subs.w	r8, r2, r1
 8003978:	4659      	mov	r1, fp
 800397a:	eb63 0901 	sbc.w	r9, r3, r1
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800398e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003992:	4690      	mov	r8, r2
 8003994:	4699      	mov	r9, r3
 8003996:	4623      	mov	r3, r4
 8003998:	eb18 0303 	adds.w	r3, r8, r3
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	462b      	mov	r3, r5
 80039a0:	eb49 0303 	adc.w	r3, r9, r3
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039b2:	4629      	mov	r1, r5
 80039b4:	024b      	lsls	r3, r1, #9
 80039b6:	4621      	mov	r1, r4
 80039b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039bc:	4621      	mov	r1, r4
 80039be:	024a      	lsls	r2, r1, #9
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c6:	2200      	movs	r2, #0
 80039c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039d0:	f7fc fc5e 	bl	8000290 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039dc:	e058      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039de:	4b38      	ldr	r3, [pc, #224]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	2200      	movs	r2, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	4611      	mov	r1, r2
 80039ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039f8:	4642      	mov	r2, r8
 80039fa:	464b      	mov	r3, r9
 80039fc:	f04f 0000 	mov.w	r0, #0
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	0159      	lsls	r1, r3, #5
 8003a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a0a:	0150      	lsls	r0, r2, #5
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4641      	mov	r1, r8
 8003a12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a16:	4649      	mov	r1, r9
 8003a18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a30:	ebb2 040a 	subs.w	r4, r2, sl
 8003a34:	eb63 050b 	sbc.w	r5, r3, fp
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	00eb      	lsls	r3, r5, #3
 8003a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a46:	00e2      	lsls	r2, r4, #3
 8003a48:	4614      	mov	r4, r2
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	4643      	mov	r3, r8
 8003a4e:	18e3      	adds	r3, r4, r3
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	464b      	mov	r3, r9
 8003a54:	eb45 0303 	adc.w	r3, r5, r3
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a66:	4629      	mov	r1, r5
 8003a68:	028b      	lsls	r3, r1, #10
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a70:	4621      	mov	r1, r4
 8003a72:	028a      	lsls	r2, r1, #10
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	61fa      	str	r2, [r7, #28]
 8003a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a84:	f7fc fc04 	bl	8000290 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003aa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3750      	adds	r7, #80	@ 0x50
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	00f42400 	.word	0x00f42400
 8003ac8:	007a1200 	.word	0x007a1200

08003acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae8:	f7ff fff0 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	0a9b      	lsrs	r3, r3, #10
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4903      	ldr	r1, [pc, #12]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40023800 	.word	0x40023800
 8003b08:	080069d0 	.word	0x080069d0

08003b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b10:	f7ff ffdc 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0b5b      	lsrs	r3, r3, #13
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4903      	ldr	r1, [pc, #12]	@ (8003b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	080069d0 	.word	0x080069d0

08003b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e041      	b.n	8003bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fe f90e 	bl	8001d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f000 fc8c 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d001      	beq.n	8003bec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e03c      	b.n	8003c66 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c74 <HAL_TIM_Base_Start+0xa0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d018      	beq.n	8003c30 <HAL_TIM_Base_Start+0x5c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c06:	d013      	beq.n	8003c30 <HAL_TIM_Base_Start+0x5c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003c78 <HAL_TIM_Base_Start+0xa4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00e      	beq.n	8003c30 <HAL_TIM_Base_Start+0x5c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a19      	ldr	r2, [pc, #100]	@ (8003c7c <HAL_TIM_Base_Start+0xa8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_TIM_Base_Start+0x5c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a17      	ldr	r2, [pc, #92]	@ (8003c80 <HAL_TIM_Base_Start+0xac>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_TIM_Base_Start+0x5c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a16      	ldr	r2, [pc, #88]	@ (8003c84 <HAL_TIM_Base_Start+0xb0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d111      	bne.n	8003c54 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d010      	beq.n	8003c64 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	e007      	b.n	8003c64 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40014000 	.word	0x40014000

08003c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d001      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e044      	b.n	8003d2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d38 <HAL_TIM_Base_Start_IT+0xb0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cca:	d013      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d3c <HAL_TIM_Base_Start_IT+0xb4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a19      	ldr	r2, [pc, #100]	@ (8003d40 <HAL_TIM_Base_Start_IT+0xb8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a17      	ldr	r2, [pc, #92]	@ (8003d44 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a16      	ldr	r2, [pc, #88]	@ (8003d48 <HAL_TIM_Base_Start_IT+0xc0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d111      	bne.n	8003d18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d010      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d16:	e007      	b.n	8003d28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40014000 	.word	0x40014000

08003d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e041      	b.n	8003de2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fe f83e 	bl	8001df4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f000 fb80 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x24>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e022      	b.n	8003e56 <HAL_TIM_PWM_Start+0x6a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d109      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x3e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e015      	b.n	8003e56 <HAL_TIM_PWM_Start+0x6a>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x58>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e008      	b.n	8003e56 <HAL_TIM_PWM_Start+0x6a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e068      	b.n	8003f30 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x82>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e6c:	e013      	b.n	8003e96 <HAL_TIM_PWM_Start+0xaa>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0x92>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e7c:	e00b      	b.n	8003e96 <HAL_TIM_PWM_Start+0xaa>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0xa2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e8c:	e003      	b.n	8003e96 <HAL_TIM_PWM_Start+0xaa>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fda8 	bl	80049f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	@ (8003f38 <HAL_TIM_PWM_Start+0x14c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d107      	bne.n	8003ebe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f38 <HAL_TIM_PWM_Start+0x14c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d018      	beq.n	8003efa <HAL_TIM_PWM_Start+0x10e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed0:	d013      	beq.n	8003efa <HAL_TIM_PWM_Start+0x10e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a19      	ldr	r2, [pc, #100]	@ (8003f3c <HAL_TIM_PWM_Start+0x150>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <HAL_TIM_PWM_Start+0x10e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a17      	ldr	r2, [pc, #92]	@ (8003f40 <HAL_TIM_PWM_Start+0x154>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_TIM_PWM_Start+0x10e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a16      	ldr	r2, [pc, #88]	@ (8003f44 <HAL_TIM_PWM_Start+0x158>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_TIM_PWM_Start+0x10e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a14      	ldr	r2, [pc, #80]	@ (8003f48 <HAL_TIM_PWM_Start+0x15c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d111      	bne.n	8003f1e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b06      	cmp	r3, #6
 8003f0a:	d010      	beq.n	8003f2e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1c:	e007      	b.n	8003f2e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40014000 	.word	0x40014000

08003f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0202 	mvn.w	r2, #2
 8003f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fa5b 	bl	8004452 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa4d 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fa5e 	bl	8004466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d020      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0204 	mvn.w	r2, #4
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa35 	bl	8004452 <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fa27 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fa38 	bl	8004466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0208 	mvn.w	r2, #8
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa0f 	bl	8004452 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa01 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fa12 	bl	8004466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d020      	beq.n	8004094 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0210 	mvn.w	r2, #16
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2208      	movs	r2, #8
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9e9 	bl	8004452 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9db 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f9ec 	bl	8004466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0201 	mvn.w	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fd fda2 	bl	8001bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00c      	beq.n	80040dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fd2a 	bl	8004b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f9bd 	bl	800447a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0220 	mvn.w	r2, #32
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fcfc 	bl	8004b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004146:	2302      	movs	r3, #2
 8004148:	e0ae      	b.n	80042a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	f200 809f 	bhi.w	8004298 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800415a:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004195 	.word	0x08004195
 8004164:	08004299 	.word	0x08004299
 8004168:	08004299 	.word	0x08004299
 800416c:	08004299 	.word	0x08004299
 8004170:	080041d5 	.word	0x080041d5
 8004174:	08004299 	.word	0x08004299
 8004178:	08004299 	.word	0x08004299
 800417c:	08004299 	.word	0x08004299
 8004180:	08004217 	.word	0x08004217
 8004184:	08004299 	.word	0x08004299
 8004188:	08004299 	.word	0x08004299
 800418c:	08004299 	.word	0x08004299
 8004190:	08004257 	.word	0x08004257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fa04 	bl	80045a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0208 	orr.w	r2, r2, #8
 80041ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6999      	ldr	r1, [r3, #24]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	619a      	str	r2, [r3, #24]
      break;
 80041d2:	e064      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fa4a 	bl	8004674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	619a      	str	r2, [r3, #24]
      break;
 8004214:	e043      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fa95 	bl	800474c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0208 	orr.w	r2, r2, #8
 8004230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0204 	bic.w	r2, r2, #4
 8004240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69d9      	ldr	r1, [r3, #28]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	61da      	str	r2, [r3, #28]
      break;
 8004254:	e023      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fadf 	bl	8004820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69d9      	ldr	r1, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	021a      	lsls	r2, r3, #8
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	61da      	str	r2, [r3, #28]
      break;
 8004296:	e002      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	75fb      	strb	r3, [r7, #23]
      break;
 800429c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_ConfigClockSource+0x1c>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0b4      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x186>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004304:	d03e      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0xd4>
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800430a:	f200 8087 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004312:	f000 8086 	beq.w	8004422 <HAL_TIM_ConfigClockSource+0x172>
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431a:	d87f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b70      	cmp	r3, #112	@ 0x70
 800431e:	d01a      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xa6>
 8004320:	2b70      	cmp	r3, #112	@ 0x70
 8004322:	d87b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b60      	cmp	r3, #96	@ 0x60
 8004326:	d050      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x11a>
 8004328:	2b60      	cmp	r3, #96	@ 0x60
 800432a:	d877      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b50      	cmp	r3, #80	@ 0x50
 800432e:	d03c      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0xfa>
 8004330:	2b50      	cmp	r3, #80	@ 0x50
 8004332:	d873      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b40      	cmp	r3, #64	@ 0x40
 8004336:	d058      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x13a>
 8004338:	2b40      	cmp	r3, #64	@ 0x40
 800433a:	d86f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b30      	cmp	r3, #48	@ 0x30
 800433e:	d064      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004340:	2b30      	cmp	r3, #48	@ 0x30
 8004342:	d86b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d060      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d867      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d05c      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	2b10      	cmp	r3, #16
 8004352:	d05a      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004354:	e062      	b.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	f000 fb25 	bl	80049b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	609a      	str	r2, [r3, #8]
      break;
 8004382:	e04f      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	f000 fb0e 	bl	80049b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043a6:	609a      	str	r2, [r3, #8]
      break;
 80043a8:	e03c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 fa82 	bl	80048c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2150      	movs	r1, #80	@ 0x50
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fadb 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 80043c8:	e02c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 faa1 	bl	800491e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2160      	movs	r1, #96	@ 0x60
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 facb 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 80043e8:	e01c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 fa62 	bl	80048c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2140      	movs	r1, #64	@ 0x40
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fabb 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 8004408:	e00c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 fab2 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 800441a:	e003      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e000      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3a      	ldr	r2, [pc, #232]	@ (800458c <TIM_Base_SetConfig+0xfc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00f      	beq.n	80044c8 <TIM_Base_SetConfig+0x38>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ae:	d00b      	beq.n	80044c8 <TIM_Base_SetConfig+0x38>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a37      	ldr	r2, [pc, #220]	@ (8004590 <TIM_Base_SetConfig+0x100>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d007      	beq.n	80044c8 <TIM_Base_SetConfig+0x38>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a36      	ldr	r2, [pc, #216]	@ (8004594 <TIM_Base_SetConfig+0x104>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0x38>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a35      	ldr	r2, [pc, #212]	@ (8004598 <TIM_Base_SetConfig+0x108>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d108      	bne.n	80044da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2b      	ldr	r2, [pc, #172]	@ (800458c <TIM_Base_SetConfig+0xfc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01b      	beq.n	800451a <TIM_Base_SetConfig+0x8a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e8:	d017      	beq.n	800451a <TIM_Base_SetConfig+0x8a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a28      	ldr	r2, [pc, #160]	@ (8004590 <TIM_Base_SetConfig+0x100>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <TIM_Base_SetConfig+0x8a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a27      	ldr	r2, [pc, #156]	@ (8004594 <TIM_Base_SetConfig+0x104>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00f      	beq.n	800451a <TIM_Base_SetConfig+0x8a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a26      	ldr	r2, [pc, #152]	@ (8004598 <TIM_Base_SetConfig+0x108>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <TIM_Base_SetConfig+0x8a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a25      	ldr	r2, [pc, #148]	@ (800459c <TIM_Base_SetConfig+0x10c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <TIM_Base_SetConfig+0x8a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a24      	ldr	r2, [pc, #144]	@ (80045a0 <TIM_Base_SetConfig+0x110>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_Base_SetConfig+0x8a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a23      	ldr	r2, [pc, #140]	@ (80045a4 <TIM_Base_SetConfig+0x114>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0e      	ldr	r2, [pc, #56]	@ (800458c <TIM_Base_SetConfig+0xfc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d103      	bne.n	8004560 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d105      	bne.n	800457e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	611a      	str	r2, [r3, #16]
  }
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40010000 	.word	0x40010000
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800
 8004598:	40000c00 	.word	0x40000c00
 800459c:	40014000 	.word	0x40014000
 80045a0:	40014400 	.word	0x40014400
 80045a4:	40014800 	.word	0x40014800

080045a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f023 0201 	bic.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f023 0302 	bic.w	r3, r3, #2
 80045f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004670 <TIM_OC1_SetConfig+0xc8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d10c      	bne.n	800461e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0308 	bic.w	r3, r3, #8
 800460a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 0304 	bic.w	r3, r3, #4
 800461c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a13      	ldr	r2, [pc, #76]	@ (8004670 <TIM_OC1_SetConfig+0xc8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d111      	bne.n	800464a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800462c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	621a      	str	r2, [r3, #32]
}
 8004664:	bf00      	nop
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40010000 	.word	0x40010000

08004674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f023 0210 	bic.w	r2, r3, #16
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0320 	bic.w	r3, r3, #32
 80046be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004748 <TIM_OC2_SetConfig+0xd4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10d      	bne.n	80046f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a15      	ldr	r2, [pc, #84]	@ (8004748 <TIM_OC2_SetConfig+0xd4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d113      	bne.n	8004720 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000

0800474c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	@ (800481c <TIM_OC3_SetConfig+0xd0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10d      	bne.n	80047c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a14      	ldr	r2, [pc, #80]	@ (800481c <TIM_OC3_SetConfig+0xd0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d113      	bne.n	80047f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40010000 	.word	0x40010000

08004820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800486a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	031b      	lsls	r3, r3, #12
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a10      	ldr	r2, [pc, #64]	@ (80048bc <TIM_OC4_SetConfig+0x9c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d109      	bne.n	8004894 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000

080048c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0201 	bic.w	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 030a 	bic.w	r3, r3, #10
 80048fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	621a      	str	r2, [r3, #32]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491e:	b480      	push	{r7}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f023 0210 	bic.w	r2, r3, #16
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800495a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	f043 0307 	orr.w	r3, r3, #7
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	021a      	lsls	r2, r3, #8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	609a      	str	r2, [r3, #8]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2201      	movs	r2, #1
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a1a      	ldr	r2, [r3, #32]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	401a      	ands	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1a      	ldr	r2, [r3, #32]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e050      	b.n	8004afa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1c      	ldr	r2, [pc, #112]	@ (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d018      	beq.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa4:	d013      	beq.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a15      	ldr	r2, [pc, #84]	@ (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a13      	ldr	r2, [pc, #76]	@ (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10c      	bne.n	8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40014000 	.word	0x40014000

08004b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e042      	b.n	8004bdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fd f9e2 	bl	8001f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2224      	movs	r2, #36	@ 0x24
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fdbd 	bl	8005708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	@ 0x28
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d175      	bne.n	8004cf0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_UART_Transmit+0x2c>
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e06e      	b.n	8004cf2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2221      	movs	r2, #33	@ 0x21
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c22:	f7fd fb75 	bl	8002310 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3c:	d108      	bne.n	8004c50 <HAL_UART_Transmit+0x6c>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e003      	b.n	8004c58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c58:	e02e      	b.n	8004cb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2180      	movs	r1, #128	@ 0x80
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fb1f 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e03a      	b.n	8004cf2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3302      	adds	r3, #2
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	e007      	b.n	8004caa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1cb      	bne.n	8004c5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2140      	movs	r1, #64	@ 0x40
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 faeb 	bl	80052a8 <UART_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e006      	b.n	8004cf2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e000      	b.n	8004cf2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	4613      	mov	r3, r2
 8004d06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d112      	bne.n	8004d3a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_UART_Receive_IT+0x26>
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e00b      	b.n	8004d3c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fb12 	bl	800535a <UART_Start_Receive_IT>
 8004d36:	4603      	mov	r3, r0
 8004d38:	e000      	b.n	8004d3c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d3a:	2302      	movs	r3, #2
  }
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b0ba      	sub	sp, #232	@ 0xe8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10f      	bne.n	8004daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_UART_IRQHandler+0x66>
 8004d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fbf2 	bl	800558c <UART_Receive_IT>
      return;
 8004da8:	e25b      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80de 	beq.w	8004f70 <HAL_UART_IRQHandler+0x22c>
 8004db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80d1 	beq.w	8004f70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <HAL_UART_IRQHandler+0xae>
 8004dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dea:	f043 0201 	orr.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_UART_IRQHandler+0xd2>
 8004dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0e:	f043 0202 	orr.w	r2, r3, #2
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_UART_IRQHandler+0xf6>
 8004e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e32:	f043 0204 	orr.w	r2, r3, #4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d011      	beq.n	8004e6a <HAL_UART_IRQHandler+0x126>
 8004e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	f043 0208 	orr.w	r2, r3, #8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 81f2 	beq.w	8005258 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_UART_IRQHandler+0x14e>
 8004e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fb7d 	bl	800558c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9c:	2b40      	cmp	r3, #64	@ 0x40
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <HAL_UART_IRQHandler+0x17a>
 8004eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d04f      	beq.n	8004f5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa85 	bl	80053ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ece:	2b40      	cmp	r3, #64	@ 0x40
 8004ed0:	d141      	bne.n	8004f56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3314      	adds	r3, #20
 8004ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3314      	adds	r3, #20
 8004efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004efe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1d9      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d013      	beq.n	8004f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005124 <HAL_UART_IRQHandler+0x3e0>)
 8004f2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fd ff5b 	bl	8002dee <HAL_DMA_Abort_IT>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	e00e      	b.n	8004f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f994 	bl	800527c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	e00a      	b.n	8004f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f990 	bl	800527c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5c:	e006      	b.n	8004f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f98c 	bl	800527c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f6a:	e175      	b.n	8005258 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6c:	bf00      	nop
    return;
 8004f6e:	e173      	b.n	8005258 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f040 814f 	bne.w	8005218 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8148 	beq.w	8005218 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8141 	beq.w	8005218 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb6:	2b40      	cmp	r3, #64	@ 0x40
 8004fb8:	f040 80b6 	bne.w	8005128 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8145 	beq.w	800525c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	f080 813e 	bcs.w	800525c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fe6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff2:	f000 8088 	beq.w	8005106 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	330c      	adds	r3, #12
 8004ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800500c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005014:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005022:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800502e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800503a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1d9      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3314      	adds	r3, #20
 8005062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005066:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800506a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800506e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e1      	bne.n	8005042 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3314      	adds	r3, #20
 8005084:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800508e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005094:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e3      	bne.n	800507e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d6:	f023 0310 	bic.w	r3, r3, #16
 80050da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	330c      	adds	r3, #12
 80050e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e3      	bne.n	80050c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005100:	4618      	mov	r0, r3
 8005102:	f7fd fe04 	bl	8002d0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005114:	b29b      	uxth	r3, r3
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	b29b      	uxth	r3, r3
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f8b7 	bl	8005290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005122:	e09b      	b.n	800525c <HAL_UART_IRQHandler+0x518>
 8005124:	08005495 	.word	0x08005495
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005130:	b29b      	uxth	r3, r3
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 808e 	beq.w	8005260 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8089 	beq.w	8005260 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800515e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005172:	647a      	str	r2, [r7, #68]	@ 0x44
 8005174:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e3      	bne.n	800514e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3314      	adds	r3, #20
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	623b      	str	r3, [r7, #32]
   return(result);
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3314      	adds	r3, #20
 80051a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e3      	bne.n	8005186 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	60fb      	str	r3, [r7, #12]
   return(result);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0310 	bic.w	r3, r3, #16
 80051e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051f0:	61fa      	str	r2, [r7, #28]
 80051f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	69b9      	ldr	r1, [r7, #24]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	617b      	str	r3, [r7, #20]
   return(result);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e3      	bne.n	80051cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800520a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f83d 	bl	8005290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005216:	e023      	b.n	8005260 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <HAL_UART_IRQHandler+0x4f4>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f943 	bl	80054bc <UART_Transmit_IT>
    return;
 8005236:	e014      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800523c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00e      	beq.n	8005262 <HAL_UART_IRQHandler+0x51e>
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f983 	bl	800555c <UART_EndTransmit_IT>
    return;
 8005256:	e004      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
    return;
 8005258:	bf00      	nop
 800525a:	e002      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
      return;
 800525c:	bf00      	nop
 800525e:	e000      	b.n	8005262 <HAL_UART_IRQHandler+0x51e>
      return;
 8005260:	bf00      	nop
  }
}
 8005262:	37e8      	adds	r7, #232	@ 0xe8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	4613      	mov	r3, r2
 80052b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b8:	e03b      	b.n	8005332 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c0:	d037      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c2:	f7fd f825 	bl	8002310 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d302      	bcc.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e03a      	b.n	8005352 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d023      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b80      	cmp	r3, #128	@ 0x80
 80052ee:	d020      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b40      	cmp	r3, #64	@ 0x40
 80052f4:	d01d      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b08      	cmp	r3, #8
 8005302:	d116      	bne.n	8005332 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f857 	bl	80053ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2208      	movs	r2, #8
 8005324:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e00f      	b.n	8005352 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4013      	ands	r3, r2
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	429a      	cmp	r2, r3
 8005340:	bf0c      	ite	eq
 8005342:	2301      	moveq	r3, #1
 8005344:	2300      	movne	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	429a      	cmp	r2, r3
 800534e:	d0b4      	beq.n	80052ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	4613      	mov	r3, r2
 8005366:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2222      	movs	r2, #34	@ 0x22
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800539e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0220 	orr.w	r2, r2, #32
 80053be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b095      	sub	sp, #84	@ 0x54
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	330c      	adds	r3, #12
 80053f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80053f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3314      	adds	r3, #20
 8005410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	61fb      	str	r3, [r7, #28]
   return(result);
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3314      	adds	r3, #20
 8005428:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800542a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e5      	bne.n	800540a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	2b01      	cmp	r3, #1
 8005444:	d119      	bne.n	800547a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	60bb      	str	r3, [r7, #8]
   return(result);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f023 0310 	bic.w	r3, r3, #16
 800545c:	647b      	str	r3, [r7, #68]	@ 0x44
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005466:	61ba      	str	r2, [r7, #24]
 8005468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	613b      	str	r3, [r7, #16]
   return(result);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005488:	bf00      	nop
 800548a:	3754      	adds	r7, #84	@ 0x54
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff fee4 	bl	800527c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b21      	cmp	r3, #33	@ 0x21
 80054ce:	d13e      	bne.n	800554e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d8:	d114      	bne.n	8005504 <UART_Transmit_IT+0x48>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d110      	bne.n	8005504 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	1c9a      	adds	r2, r3, #2
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	621a      	str	r2, [r3, #32]
 8005502:	e008      	b.n	8005516 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	1c59      	adds	r1, r3, #1
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6211      	str	r1, [r2, #32]
 800550e:	781a      	ldrb	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29b      	uxth	r3, r3
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	4619      	mov	r1, r3
 8005524:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005538:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005548:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005572:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff fe73 	bl	8005268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08c      	sub	sp, #48	@ 0x30
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b22      	cmp	r3, #34	@ 0x22
 800559e:	f040 80ae 	bne.w	80056fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055aa:	d117      	bne.n	80055dc <UART_Receive_IT+0x50>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d113      	bne.n	80055dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d4:	1c9a      	adds	r2, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80055da:	e026      	b.n	800562a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ee:	d007      	beq.n	8005600 <UART_Receive_IT+0x74>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <UART_Receive_IT+0x82>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	e008      	b.n	8005620 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800561a:	b2da      	uxtb	r2, r3
 800561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29b      	uxth	r3, r3
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4619      	mov	r1, r3
 8005638:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800563a:	2b00      	cmp	r3, #0
 800563c:	d15d      	bne.n	80056fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0220 	bic.w	r2, r2, #32
 800564c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800565c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005680:	2b01      	cmp	r3, #1
 8005682:	d135      	bne.n	80056f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	330c      	adds	r3, #12
 8005690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	613b      	str	r3, [r7, #16]
   return(result);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f023 0310 	bic.w	r3, r3, #16
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056aa:	623a      	str	r2, [r7, #32]
 80056ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	69f9      	ldr	r1, [r7, #28]
 80056b0:	6a3a      	ldr	r2, [r7, #32]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e5      	bne.n	800568a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d10a      	bne.n	80056e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fdd1 	bl	8005290 <HAL_UARTEx_RxEventCallback>
 80056ee:	e002      	b.n	80056f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fc f83f 	bl	8001774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e002      	b.n	8005700 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e000      	b.n	8005700 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
  }
}
 8005700:	4618      	mov	r0, r3
 8005702:	3730      	adds	r7, #48	@ 0x30
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800570c:	b0c0      	sub	sp, #256	@ 0x100
 800570e:	af00      	add	r7, sp, #0
 8005710:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	68d9      	ldr	r1, [r3, #12]
 8005726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	ea40 0301 	orr.w	r3, r0, r1
 8005730:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	431a      	orrs	r2, r3
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	431a      	orrs	r2, r3
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005760:	f021 010c 	bic.w	r1, r1, #12
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800576e:	430b      	orrs	r3, r1
 8005770:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800577e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005782:	6999      	ldr	r1, [r3, #24]
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	ea40 0301 	orr.w	r3, r0, r1
 800578e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4b8f      	ldr	r3, [pc, #572]	@ (80059d4 <UART_SetConfig+0x2cc>)
 8005798:	429a      	cmp	r2, r3
 800579a:	d005      	beq.n	80057a8 <UART_SetConfig+0xa0>
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b8d      	ldr	r3, [pc, #564]	@ (80059d8 <UART_SetConfig+0x2d0>)
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d104      	bne.n	80057b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057a8:	f7fe f9b0 	bl	8003b0c <HAL_RCC_GetPCLK2Freq>
 80057ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057b0:	e003      	b.n	80057ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057b2:	f7fe f997 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 80057b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c4:	f040 810c 	bne.w	80059e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057da:	4622      	mov	r2, r4
 80057dc:	462b      	mov	r3, r5
 80057de:	1891      	adds	r1, r2, r2
 80057e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057e2:	415b      	adcs	r3, r3
 80057e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057ea:	4621      	mov	r1, r4
 80057ec:	eb12 0801 	adds.w	r8, r2, r1
 80057f0:	4629      	mov	r1, r5
 80057f2:	eb43 0901 	adc.w	r9, r3, r1
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800580a:	4690      	mov	r8, r2
 800580c:	4699      	mov	r9, r3
 800580e:	4623      	mov	r3, r4
 8005810:	eb18 0303 	adds.w	r3, r8, r3
 8005814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005818:	462b      	mov	r3, r5
 800581a:	eb49 0303 	adc.w	r3, r9, r3
 800581e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800582e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005832:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005836:	460b      	mov	r3, r1
 8005838:	18db      	adds	r3, r3, r3
 800583a:	653b      	str	r3, [r7, #80]	@ 0x50
 800583c:	4613      	mov	r3, r2
 800583e:	eb42 0303 	adc.w	r3, r2, r3
 8005842:	657b      	str	r3, [r7, #84]	@ 0x54
 8005844:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005848:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800584c:	f7fa fd20 	bl	8000290 <__aeabi_uldivmod>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4b61      	ldr	r3, [pc, #388]	@ (80059dc <UART_SetConfig+0x2d4>)
 8005856:	fba3 2302 	umull	r2, r3, r3, r2
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	011c      	lsls	r4, r3, #4
 800585e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005862:	2200      	movs	r2, #0
 8005864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005868:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800586c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005870:	4642      	mov	r2, r8
 8005872:	464b      	mov	r3, r9
 8005874:	1891      	adds	r1, r2, r2
 8005876:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005878:	415b      	adcs	r3, r3
 800587a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800587c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005880:	4641      	mov	r1, r8
 8005882:	eb12 0a01 	adds.w	sl, r2, r1
 8005886:	4649      	mov	r1, r9
 8005888:	eb43 0b01 	adc.w	fp, r3, r1
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005898:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800589c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a0:	4692      	mov	sl, r2
 80058a2:	469b      	mov	fp, r3
 80058a4:	4643      	mov	r3, r8
 80058a6:	eb1a 0303 	adds.w	r3, sl, r3
 80058aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058ae:	464b      	mov	r3, r9
 80058b0:	eb4b 0303 	adc.w	r3, fp, r3
 80058b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058cc:	460b      	mov	r3, r1
 80058ce:	18db      	adds	r3, r3, r3
 80058d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058d2:	4613      	mov	r3, r2
 80058d4:	eb42 0303 	adc.w	r3, r2, r3
 80058d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058e2:	f7fa fcd5 	bl	8000290 <__aeabi_uldivmod>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4611      	mov	r1, r2
 80058ec:	4b3b      	ldr	r3, [pc, #236]	@ (80059dc <UART_SetConfig+0x2d4>)
 80058ee:	fba3 2301 	umull	r2, r3, r3, r1
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	2264      	movs	r2, #100	@ 0x64
 80058f6:	fb02 f303 	mul.w	r3, r2, r3
 80058fa:	1acb      	subs	r3, r1, r3
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005902:	4b36      	ldr	r3, [pc, #216]	@ (80059dc <UART_SetConfig+0x2d4>)
 8005904:	fba3 2302 	umull	r2, r3, r3, r2
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005910:	441c      	add	r4, r3
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800591c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005920:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	1891      	adds	r1, r2, r2
 800592a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800592c:	415b      	adcs	r3, r3
 800592e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005930:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005934:	4641      	mov	r1, r8
 8005936:	1851      	adds	r1, r2, r1
 8005938:	6339      	str	r1, [r7, #48]	@ 0x30
 800593a:	4649      	mov	r1, r9
 800593c:	414b      	adcs	r3, r1
 800593e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800594c:	4659      	mov	r1, fp
 800594e:	00cb      	lsls	r3, r1, #3
 8005950:	4651      	mov	r1, sl
 8005952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005956:	4651      	mov	r1, sl
 8005958:	00ca      	lsls	r2, r1, #3
 800595a:	4610      	mov	r0, r2
 800595c:	4619      	mov	r1, r3
 800595e:	4603      	mov	r3, r0
 8005960:	4642      	mov	r2, r8
 8005962:	189b      	adds	r3, r3, r2
 8005964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005968:	464b      	mov	r3, r9
 800596a:	460a      	mov	r2, r1
 800596c:	eb42 0303 	adc.w	r3, r2, r3
 8005970:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005980:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005984:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005988:	460b      	mov	r3, r1
 800598a:	18db      	adds	r3, r3, r3
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800598e:	4613      	mov	r3, r2
 8005990:	eb42 0303 	adc.w	r3, r2, r3
 8005994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005996:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800599a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800599e:	f7fa fc77 	bl	8000290 <__aeabi_uldivmod>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <UART_SetConfig+0x2d4>)
 80059a8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	2164      	movs	r1, #100	@ 0x64
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	3332      	adds	r3, #50	@ 0x32
 80059ba:	4a08      	ldr	r2, [pc, #32]	@ (80059dc <UART_SetConfig+0x2d4>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	f003 0207 	and.w	r2, r3, #7
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4422      	add	r2, r4
 80059ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059d0:	e106      	b.n	8005be0 <UART_SetConfig+0x4d8>
 80059d2:	bf00      	nop
 80059d4:	40011000 	.word	0x40011000
 80059d8:	40011400 	.word	0x40011400
 80059dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059f2:	4642      	mov	r2, r8
 80059f4:	464b      	mov	r3, r9
 80059f6:	1891      	adds	r1, r2, r2
 80059f8:	6239      	str	r1, [r7, #32]
 80059fa:	415b      	adcs	r3, r3
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a02:	4641      	mov	r1, r8
 8005a04:	1854      	adds	r4, r2, r1
 8005a06:	4649      	mov	r1, r9
 8005a08:	eb43 0501 	adc.w	r5, r3, r1
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	00eb      	lsls	r3, r5, #3
 8005a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a1a:	00e2      	lsls	r2, r4, #3
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	461d      	mov	r5, r3
 8005a20:	4643      	mov	r3, r8
 8005a22:	18e3      	adds	r3, r4, r3
 8005a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a28:	464b      	mov	r3, r9
 8005a2a:	eb45 0303 	adc.w	r3, r5, r3
 8005a2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a4e:	4629      	mov	r1, r5
 8005a50:	008b      	lsls	r3, r1, #2
 8005a52:	4621      	mov	r1, r4
 8005a54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a58:	4621      	mov	r1, r4
 8005a5a:	008a      	lsls	r2, r1, #2
 8005a5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a60:	f7fa fc16 	bl	8000290 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4b60      	ldr	r3, [pc, #384]	@ (8005bec <UART_SetConfig+0x4e4>)
 8005a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	011c      	lsls	r4, r3, #4
 8005a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a84:	4642      	mov	r2, r8
 8005a86:	464b      	mov	r3, r9
 8005a88:	1891      	adds	r1, r2, r2
 8005a8a:	61b9      	str	r1, [r7, #24]
 8005a8c:	415b      	adcs	r3, r3
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a94:	4641      	mov	r1, r8
 8005a96:	1851      	adds	r1, r2, r1
 8005a98:	6139      	str	r1, [r7, #16]
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	414b      	adcs	r3, r1
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005aac:	4659      	mov	r1, fp
 8005aae:	00cb      	lsls	r3, r1, #3
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ab6:	4651      	mov	r1, sl
 8005ab8:	00ca      	lsls	r2, r1, #3
 8005aba:	4610      	mov	r0, r2
 8005abc:	4619      	mov	r1, r3
 8005abe:	4603      	mov	r3, r0
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	189b      	adds	r3, r3, r2
 8005ac4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ac8:	464b      	mov	r3, r9
 8005aca:	460a      	mov	r2, r1
 8005acc:	eb42 0303 	adc.w	r3, r2, r3
 8005ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ade:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005aec:	4649      	mov	r1, r9
 8005aee:	008b      	lsls	r3, r1, #2
 8005af0:	4641      	mov	r1, r8
 8005af2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005af6:	4641      	mov	r1, r8
 8005af8:	008a      	lsls	r2, r1, #2
 8005afa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005afe:	f7fa fbc7 	bl	8000290 <__aeabi_uldivmod>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4611      	mov	r1, r2
 8005b08:	4b38      	ldr	r3, [pc, #224]	@ (8005bec <UART_SetConfig+0x4e4>)
 8005b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2264      	movs	r2, #100	@ 0x64
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	1acb      	subs	r3, r1, r3
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	3332      	adds	r3, #50	@ 0x32
 8005b1c:	4a33      	ldr	r2, [pc, #204]	@ (8005bec <UART_SetConfig+0x4e4>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b28:	441c      	add	r4, r3
 8005b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2e:	2200      	movs	r2, #0
 8005b30:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b32:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	1891      	adds	r1, r2, r2
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	415b      	adcs	r3, r3
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b48:	4641      	mov	r1, r8
 8005b4a:	1851      	adds	r1, r2, r1
 8005b4c:	6039      	str	r1, [r7, #0]
 8005b4e:	4649      	mov	r1, r9
 8005b50:	414b      	adcs	r3, r1
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b60:	4659      	mov	r1, fp
 8005b62:	00cb      	lsls	r3, r1, #3
 8005b64:	4651      	mov	r1, sl
 8005b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	00ca      	lsls	r2, r1, #3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	4642      	mov	r2, r8
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	460a      	mov	r2, r1
 8005b7e:	eb42 0303 	adc.w	r3, r2, r3
 8005b82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	008b      	lsls	r3, r1, #2
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	008a      	lsls	r2, r1, #2
 8005baa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bae:	f7fa fb6f 	bl	8000290 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <UART_SetConfig+0x4e4>)
 8005bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	2164      	movs	r1, #100	@ 0x64
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	3332      	adds	r3, #50	@ 0x32
 8005bca:	4a08      	ldr	r2, [pc, #32]	@ (8005bec <UART_SetConfig+0x4e4>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4422      	add	r2, r4
 8005bde:	609a      	str	r2, [r3, #8]
}
 8005be0:	bf00      	nop
 8005be2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005be6:	46bd      	mov	sp, r7
 8005be8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bec:	51eb851f 	.word	0x51eb851f

08005bf0 <atoi>:
 8005bf0:	220a      	movs	r2, #10
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	f000 b87a 	b.w	8005cec <strtol>

08005bf8 <_strtol_l.constprop.0>:
 8005bf8:	2b24      	cmp	r3, #36	@ 0x24
 8005bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfe:	4686      	mov	lr, r0
 8005c00:	4690      	mov	r8, r2
 8005c02:	d801      	bhi.n	8005c08 <_strtol_l.constprop.0+0x10>
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d106      	bne.n	8005c16 <_strtol_l.constprop.0+0x1e>
 8005c08:	f000 f8a2 	bl	8005d50 <__errno>
 8005c0c:	2316      	movs	r3, #22
 8005c0e:	6003      	str	r3, [r0, #0]
 8005c10:	2000      	movs	r0, #0
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c16:	4834      	ldr	r0, [pc, #208]	@ (8005ce8 <_strtol_l.constprop.0+0xf0>)
 8005c18:	460d      	mov	r5, r1
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c20:	5d06      	ldrb	r6, [r0, r4]
 8005c22:	f016 0608 	ands.w	r6, r6, #8
 8005c26:	d1f8      	bne.n	8005c1a <_strtol_l.constprop.0+0x22>
 8005c28:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c2a:	d12d      	bne.n	8005c88 <_strtol_l.constprop.0+0x90>
 8005c2c:	782c      	ldrb	r4, [r5, #0]
 8005c2e:	2601      	movs	r6, #1
 8005c30:	1c95      	adds	r5, r2, #2
 8005c32:	f033 0210 	bics.w	r2, r3, #16
 8005c36:	d109      	bne.n	8005c4c <_strtol_l.constprop.0+0x54>
 8005c38:	2c30      	cmp	r4, #48	@ 0x30
 8005c3a:	d12a      	bne.n	8005c92 <_strtol_l.constprop.0+0x9a>
 8005c3c:	782a      	ldrb	r2, [r5, #0]
 8005c3e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c42:	2a58      	cmp	r2, #88	@ 0x58
 8005c44:	d125      	bne.n	8005c92 <_strtol_l.constprop.0+0x9a>
 8005c46:	786c      	ldrb	r4, [r5, #1]
 8005c48:	2310      	movs	r3, #16
 8005c4a:	3502      	adds	r5, #2
 8005c4c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005c50:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005c54:	2200      	movs	r2, #0
 8005c56:	fbbc f9f3 	udiv	r9, ip, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005c60:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005c64:	2f09      	cmp	r7, #9
 8005c66:	d81b      	bhi.n	8005ca0 <_strtol_l.constprop.0+0xa8>
 8005c68:	463c      	mov	r4, r7
 8005c6a:	42a3      	cmp	r3, r4
 8005c6c:	dd27      	ble.n	8005cbe <_strtol_l.constprop.0+0xc6>
 8005c6e:	1c57      	adds	r7, r2, #1
 8005c70:	d007      	beq.n	8005c82 <_strtol_l.constprop.0+0x8a>
 8005c72:	4581      	cmp	r9, r0
 8005c74:	d320      	bcc.n	8005cb8 <_strtol_l.constprop.0+0xc0>
 8005c76:	d101      	bne.n	8005c7c <_strtol_l.constprop.0+0x84>
 8005c78:	45a2      	cmp	sl, r4
 8005c7a:	db1d      	blt.n	8005cb8 <_strtol_l.constprop.0+0xc0>
 8005c7c:	fb00 4003 	mla	r0, r0, r3, r4
 8005c80:	2201      	movs	r2, #1
 8005c82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c86:	e7eb      	b.n	8005c60 <_strtol_l.constprop.0+0x68>
 8005c88:	2c2b      	cmp	r4, #43	@ 0x2b
 8005c8a:	bf04      	itt	eq
 8005c8c:	782c      	ldrbeq	r4, [r5, #0]
 8005c8e:	1c95      	addeq	r5, r2, #2
 8005c90:	e7cf      	b.n	8005c32 <_strtol_l.constprop.0+0x3a>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1da      	bne.n	8005c4c <_strtol_l.constprop.0+0x54>
 8005c96:	2c30      	cmp	r4, #48	@ 0x30
 8005c98:	bf0c      	ite	eq
 8005c9a:	2308      	moveq	r3, #8
 8005c9c:	230a      	movne	r3, #10
 8005c9e:	e7d5      	b.n	8005c4c <_strtol_l.constprop.0+0x54>
 8005ca0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005ca4:	2f19      	cmp	r7, #25
 8005ca6:	d801      	bhi.n	8005cac <_strtol_l.constprop.0+0xb4>
 8005ca8:	3c37      	subs	r4, #55	@ 0x37
 8005caa:	e7de      	b.n	8005c6a <_strtol_l.constprop.0+0x72>
 8005cac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005cb0:	2f19      	cmp	r7, #25
 8005cb2:	d804      	bhi.n	8005cbe <_strtol_l.constprop.0+0xc6>
 8005cb4:	3c57      	subs	r4, #87	@ 0x57
 8005cb6:	e7d8      	b.n	8005c6a <_strtol_l.constprop.0+0x72>
 8005cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbc:	e7e1      	b.n	8005c82 <_strtol_l.constprop.0+0x8a>
 8005cbe:	1c53      	adds	r3, r2, #1
 8005cc0:	d108      	bne.n	8005cd4 <_strtol_l.constprop.0+0xdc>
 8005cc2:	2322      	movs	r3, #34	@ 0x22
 8005cc4:	f8ce 3000 	str.w	r3, [lr]
 8005cc8:	4660      	mov	r0, ip
 8005cca:	f1b8 0f00 	cmp.w	r8, #0
 8005cce:	d0a0      	beq.n	8005c12 <_strtol_l.constprop.0+0x1a>
 8005cd0:	1e69      	subs	r1, r5, #1
 8005cd2:	e006      	b.n	8005ce2 <_strtol_l.constprop.0+0xea>
 8005cd4:	b106      	cbz	r6, 8005cd8 <_strtol_l.constprop.0+0xe0>
 8005cd6:	4240      	negs	r0, r0
 8005cd8:	f1b8 0f00 	cmp.w	r8, #0
 8005cdc:	d099      	beq.n	8005c12 <_strtol_l.constprop.0+0x1a>
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d1f6      	bne.n	8005cd0 <_strtol_l.constprop.0+0xd8>
 8005ce2:	f8c8 1000 	str.w	r1, [r8]
 8005ce6:	e794      	b.n	8005c12 <_strtol_l.constprop.0+0x1a>
 8005ce8:	080069d9 	.word	0x080069d9

08005cec <strtol>:
 8005cec:	4613      	mov	r3, r2
 8005cee:	460a      	mov	r2, r1
 8005cf0:	4601      	mov	r1, r0
 8005cf2:	4802      	ldr	r0, [pc, #8]	@ (8005cfc <strtol+0x10>)
 8005cf4:	6800      	ldr	r0, [r0, #0]
 8005cf6:	f7ff bf7f 	b.w	8005bf8 <_strtol_l.constprop.0>
 8005cfa:	bf00      	nop
 8005cfc:	20000010 	.word	0x20000010

08005d00 <siprintf>:
 8005d00:	b40e      	push	{r1, r2, r3}
 8005d02:	b500      	push	{lr}
 8005d04:	b09c      	sub	sp, #112	@ 0x70
 8005d06:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d08:	9002      	str	r0, [sp, #8]
 8005d0a:	9006      	str	r0, [sp, #24]
 8005d0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d10:	4809      	ldr	r0, [pc, #36]	@ (8005d38 <siprintf+0x38>)
 8005d12:	9107      	str	r1, [sp, #28]
 8005d14:	9104      	str	r1, [sp, #16]
 8005d16:	4909      	ldr	r1, [pc, #36]	@ (8005d3c <siprintf+0x3c>)
 8005d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1c:	9105      	str	r1, [sp, #20]
 8005d1e:	6800      	ldr	r0, [r0, #0]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	a902      	add	r1, sp, #8
 8005d24:	f000 f994 	bl	8006050 <_svfiprintf_r>
 8005d28:	9b02      	ldr	r3, [sp, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	b01c      	add	sp, #112	@ 0x70
 8005d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d34:	b003      	add	sp, #12
 8005d36:	4770      	bx	lr
 8005d38:	20000010 	.word	0x20000010
 8005d3c:	ffff0208 	.word	0xffff0208

08005d40 <memset>:
 8005d40:	4402      	add	r2, r0
 8005d42:	4603      	mov	r3, r0
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d100      	bne.n	8005d4a <memset+0xa>
 8005d48:	4770      	bx	lr
 8005d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4e:	e7f9      	b.n	8005d44 <memset+0x4>

08005d50 <__errno>:
 8005d50:	4b01      	ldr	r3, [pc, #4]	@ (8005d58 <__errno+0x8>)
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000010 	.word	0x20000010

08005d5c <__libc_init_array>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d94 <__libc_init_array+0x38>)
 8005d60:	4c0d      	ldr	r4, [pc, #52]	@ (8005d98 <__libc_init_array+0x3c>)
 8005d62:	1b64      	subs	r4, r4, r5
 8005d64:	10a4      	asrs	r4, r4, #2
 8005d66:	2600      	movs	r6, #0
 8005d68:	42a6      	cmp	r6, r4
 8005d6a:	d109      	bne.n	8005d80 <__libc_init_array+0x24>
 8005d6c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d9c <__libc_init_array+0x40>)
 8005d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8005da0 <__libc_init_array+0x44>)
 8005d70:	f000 fc66 	bl	8006640 <_init>
 8005d74:	1b64      	subs	r4, r4, r5
 8005d76:	10a4      	asrs	r4, r4, #2
 8005d78:	2600      	movs	r6, #0
 8005d7a:	42a6      	cmp	r6, r4
 8005d7c:	d105      	bne.n	8005d8a <__libc_init_array+0x2e>
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d84:	4798      	blx	r3
 8005d86:	3601      	adds	r6, #1
 8005d88:	e7ee      	b.n	8005d68 <__libc_init_array+0xc>
 8005d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8e:	4798      	blx	r3
 8005d90:	3601      	adds	r6, #1
 8005d92:	e7f2      	b.n	8005d7a <__libc_init_array+0x1e>
 8005d94:	08006b14 	.word	0x08006b14
 8005d98:	08006b14 	.word	0x08006b14
 8005d9c:	08006b14 	.word	0x08006b14
 8005da0:	08006b18 	.word	0x08006b18

08005da4 <__retarget_lock_acquire_recursive>:
 8005da4:	4770      	bx	lr

08005da6 <__retarget_lock_release_recursive>:
 8005da6:	4770      	bx	lr

08005da8 <_free_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4605      	mov	r5, r0
 8005dac:	2900      	cmp	r1, #0
 8005dae:	d041      	beq.n	8005e34 <_free_r+0x8c>
 8005db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db4:	1f0c      	subs	r4, r1, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfb8      	it	lt
 8005dba:	18e4      	addlt	r4, r4, r3
 8005dbc:	f000 f8e0 	bl	8005f80 <__malloc_lock>
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e38 <_free_r+0x90>)
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	b933      	cbnz	r3, 8005dd4 <_free_r+0x2c>
 8005dc6:	6063      	str	r3, [r4, #4]
 8005dc8:	6014      	str	r4, [r2, #0]
 8005dca:	4628      	mov	r0, r5
 8005dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd0:	f000 b8dc 	b.w	8005f8c <__malloc_unlock>
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	d908      	bls.n	8005dea <_free_r+0x42>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	1821      	adds	r1, r4, r0
 8005ddc:	428b      	cmp	r3, r1
 8005dde:	bf01      	itttt	eq
 8005de0:	6819      	ldreq	r1, [r3, #0]
 8005de2:	685b      	ldreq	r3, [r3, #4]
 8005de4:	1809      	addeq	r1, r1, r0
 8005de6:	6021      	streq	r1, [r4, #0]
 8005de8:	e7ed      	b.n	8005dc6 <_free_r+0x1e>
 8005dea:	461a      	mov	r2, r3
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	b10b      	cbz	r3, 8005df4 <_free_r+0x4c>
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	d9fa      	bls.n	8005dea <_free_r+0x42>
 8005df4:	6811      	ldr	r1, [r2, #0]
 8005df6:	1850      	adds	r0, r2, r1
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d10b      	bne.n	8005e14 <_free_r+0x6c>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	4401      	add	r1, r0
 8005e00:	1850      	adds	r0, r2, r1
 8005e02:	4283      	cmp	r3, r0
 8005e04:	6011      	str	r1, [r2, #0]
 8005e06:	d1e0      	bne.n	8005dca <_free_r+0x22>
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	6053      	str	r3, [r2, #4]
 8005e0e:	4408      	add	r0, r1
 8005e10:	6010      	str	r0, [r2, #0]
 8005e12:	e7da      	b.n	8005dca <_free_r+0x22>
 8005e14:	d902      	bls.n	8005e1c <_free_r+0x74>
 8005e16:	230c      	movs	r3, #12
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	e7d6      	b.n	8005dca <_free_r+0x22>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	1821      	adds	r1, r4, r0
 8005e20:	428b      	cmp	r3, r1
 8005e22:	bf04      	itt	eq
 8005e24:	6819      	ldreq	r1, [r3, #0]
 8005e26:	685b      	ldreq	r3, [r3, #4]
 8005e28:	6063      	str	r3, [r4, #4]
 8005e2a:	bf04      	itt	eq
 8005e2c:	1809      	addeq	r1, r1, r0
 8005e2e:	6021      	streq	r1, [r4, #0]
 8005e30:	6054      	str	r4, [r2, #4]
 8005e32:	e7ca      	b.n	8005dca <_free_r+0x22>
 8005e34:	bd38      	pop	{r3, r4, r5, pc}
 8005e36:	bf00      	nop
 8005e38:	2000043c 	.word	0x2000043c

08005e3c <sbrk_aligned>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005e7c <sbrk_aligned+0x40>)
 8005e40:	460c      	mov	r4, r1
 8005e42:	6831      	ldr	r1, [r6, #0]
 8005e44:	4605      	mov	r5, r0
 8005e46:	b911      	cbnz	r1, 8005e4e <sbrk_aligned+0x12>
 8005e48:	f000 fba6 	bl	8006598 <_sbrk_r>
 8005e4c:	6030      	str	r0, [r6, #0]
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4628      	mov	r0, r5
 8005e52:	f000 fba1 	bl	8006598 <_sbrk_r>
 8005e56:	1c43      	adds	r3, r0, #1
 8005e58:	d103      	bne.n	8005e62 <sbrk_aligned+0x26>
 8005e5a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e5e:	4620      	mov	r0, r4
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
 8005e62:	1cc4      	adds	r4, r0, #3
 8005e64:	f024 0403 	bic.w	r4, r4, #3
 8005e68:	42a0      	cmp	r0, r4
 8005e6a:	d0f8      	beq.n	8005e5e <sbrk_aligned+0x22>
 8005e6c:	1a21      	subs	r1, r4, r0
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 fb92 	bl	8006598 <_sbrk_r>
 8005e74:	3001      	adds	r0, #1
 8005e76:	d1f2      	bne.n	8005e5e <sbrk_aligned+0x22>
 8005e78:	e7ef      	b.n	8005e5a <sbrk_aligned+0x1e>
 8005e7a:	bf00      	nop
 8005e7c:	20000438 	.word	0x20000438

08005e80 <_malloc_r>:
 8005e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e84:	1ccd      	adds	r5, r1, #3
 8005e86:	f025 0503 	bic.w	r5, r5, #3
 8005e8a:	3508      	adds	r5, #8
 8005e8c:	2d0c      	cmp	r5, #12
 8005e8e:	bf38      	it	cc
 8005e90:	250c      	movcc	r5, #12
 8005e92:	2d00      	cmp	r5, #0
 8005e94:	4606      	mov	r6, r0
 8005e96:	db01      	blt.n	8005e9c <_malloc_r+0x1c>
 8005e98:	42a9      	cmp	r1, r5
 8005e9a:	d904      	bls.n	8005ea6 <_malloc_r+0x26>
 8005e9c:	230c      	movs	r3, #12
 8005e9e:	6033      	str	r3, [r6, #0]
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f7c <_malloc_r+0xfc>
 8005eaa:	f000 f869 	bl	8005f80 <__malloc_lock>
 8005eae:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb2:	461c      	mov	r4, r3
 8005eb4:	bb44      	cbnz	r4, 8005f08 <_malloc_r+0x88>
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f7ff ffbf 	bl	8005e3c <sbrk_aligned>
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	d158      	bne.n	8005f76 <_malloc_r+0xf6>
 8005ec4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ec8:	4627      	mov	r7, r4
 8005eca:	2f00      	cmp	r7, #0
 8005ecc:	d143      	bne.n	8005f56 <_malloc_r+0xd6>
 8005ece:	2c00      	cmp	r4, #0
 8005ed0:	d04b      	beq.n	8005f6a <_malloc_r+0xea>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	eb04 0903 	add.w	r9, r4, r3
 8005edc:	f000 fb5c 	bl	8006598 <_sbrk_r>
 8005ee0:	4581      	cmp	r9, r0
 8005ee2:	d142      	bne.n	8005f6a <_malloc_r+0xea>
 8005ee4:	6821      	ldr	r1, [r4, #0]
 8005ee6:	1a6d      	subs	r5, r5, r1
 8005ee8:	4629      	mov	r1, r5
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7ff ffa6 	bl	8005e3c <sbrk_aligned>
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d03a      	beq.n	8005f6a <_malloc_r+0xea>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	442b      	add	r3, r5
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	f8d8 3000 	ldr.w	r3, [r8]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	bb62      	cbnz	r2, 8005f5c <_malloc_r+0xdc>
 8005f02:	f8c8 7000 	str.w	r7, [r8]
 8005f06:	e00f      	b.n	8005f28 <_malloc_r+0xa8>
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	1b52      	subs	r2, r2, r5
 8005f0c:	d420      	bmi.n	8005f50 <_malloc_r+0xd0>
 8005f0e:	2a0b      	cmp	r2, #11
 8005f10:	d917      	bls.n	8005f42 <_malloc_r+0xc2>
 8005f12:	1961      	adds	r1, r4, r5
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	6025      	str	r5, [r4, #0]
 8005f18:	bf18      	it	ne
 8005f1a:	6059      	strne	r1, [r3, #4]
 8005f1c:	6863      	ldr	r3, [r4, #4]
 8005f1e:	bf08      	it	eq
 8005f20:	f8c8 1000 	streq.w	r1, [r8]
 8005f24:	5162      	str	r2, [r4, r5]
 8005f26:	604b      	str	r3, [r1, #4]
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f000 f82f 	bl	8005f8c <__malloc_unlock>
 8005f2e:	f104 000b 	add.w	r0, r4, #11
 8005f32:	1d23      	adds	r3, r4, #4
 8005f34:	f020 0007 	bic.w	r0, r0, #7
 8005f38:	1ac2      	subs	r2, r0, r3
 8005f3a:	bf1c      	itt	ne
 8005f3c:	1a1b      	subne	r3, r3, r0
 8005f3e:	50a3      	strne	r3, [r4, r2]
 8005f40:	e7af      	b.n	8005ea2 <_malloc_r+0x22>
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	bf0c      	ite	eq
 8005f48:	f8c8 2000 	streq.w	r2, [r8]
 8005f4c:	605a      	strne	r2, [r3, #4]
 8005f4e:	e7eb      	b.n	8005f28 <_malloc_r+0xa8>
 8005f50:	4623      	mov	r3, r4
 8005f52:	6864      	ldr	r4, [r4, #4]
 8005f54:	e7ae      	b.n	8005eb4 <_malloc_r+0x34>
 8005f56:	463c      	mov	r4, r7
 8005f58:	687f      	ldr	r7, [r7, #4]
 8005f5a:	e7b6      	b.n	8005eca <_malloc_r+0x4a>
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d1fb      	bne.n	8005f5c <_malloc_r+0xdc>
 8005f64:	2300      	movs	r3, #0
 8005f66:	6053      	str	r3, [r2, #4]
 8005f68:	e7de      	b.n	8005f28 <_malloc_r+0xa8>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	6033      	str	r3, [r6, #0]
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f000 f80c 	bl	8005f8c <__malloc_unlock>
 8005f74:	e794      	b.n	8005ea0 <_malloc_r+0x20>
 8005f76:	6005      	str	r5, [r0, #0]
 8005f78:	e7d6      	b.n	8005f28 <_malloc_r+0xa8>
 8005f7a:	bf00      	nop
 8005f7c:	2000043c 	.word	0x2000043c

08005f80 <__malloc_lock>:
 8005f80:	4801      	ldr	r0, [pc, #4]	@ (8005f88 <__malloc_lock+0x8>)
 8005f82:	f7ff bf0f 	b.w	8005da4 <__retarget_lock_acquire_recursive>
 8005f86:	bf00      	nop
 8005f88:	20000434 	.word	0x20000434

08005f8c <__malloc_unlock>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	@ (8005f94 <__malloc_unlock+0x8>)
 8005f8e:	f7ff bf0a 	b.w	8005da6 <__retarget_lock_release_recursive>
 8005f92:	bf00      	nop
 8005f94:	20000434 	.word	0x20000434

08005f98 <__ssputs_r>:
 8005f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f9c:	688e      	ldr	r6, [r1, #8]
 8005f9e:	461f      	mov	r7, r3
 8005fa0:	42be      	cmp	r6, r7
 8005fa2:	680b      	ldr	r3, [r1, #0]
 8005fa4:	4682      	mov	sl, r0
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	4690      	mov	r8, r2
 8005faa:	d82d      	bhi.n	8006008 <__ssputs_r+0x70>
 8005fac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fb4:	d026      	beq.n	8006004 <__ssputs_r+0x6c>
 8005fb6:	6965      	ldr	r5, [r4, #20]
 8005fb8:	6909      	ldr	r1, [r1, #16]
 8005fba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fbe:	eba3 0901 	sub.w	r9, r3, r1
 8005fc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fc6:	1c7b      	adds	r3, r7, #1
 8005fc8:	444b      	add	r3, r9
 8005fca:	106d      	asrs	r5, r5, #1
 8005fcc:	429d      	cmp	r5, r3
 8005fce:	bf38      	it	cc
 8005fd0:	461d      	movcc	r5, r3
 8005fd2:	0553      	lsls	r3, r2, #21
 8005fd4:	d527      	bpl.n	8006026 <__ssputs_r+0x8e>
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f7ff ff52 	bl	8005e80 <_malloc_r>
 8005fdc:	4606      	mov	r6, r0
 8005fde:	b360      	cbz	r0, 800603a <__ssputs_r+0xa2>
 8005fe0:	6921      	ldr	r1, [r4, #16]
 8005fe2:	464a      	mov	r2, r9
 8005fe4:	f000 fae8 	bl	80065b8 <memcpy>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	6126      	str	r6, [r4, #16]
 8005ff6:	6165      	str	r5, [r4, #20]
 8005ff8:	444e      	add	r6, r9
 8005ffa:	eba5 0509 	sub.w	r5, r5, r9
 8005ffe:	6026      	str	r6, [r4, #0]
 8006000:	60a5      	str	r5, [r4, #8]
 8006002:	463e      	mov	r6, r7
 8006004:	42be      	cmp	r6, r7
 8006006:	d900      	bls.n	800600a <__ssputs_r+0x72>
 8006008:	463e      	mov	r6, r7
 800600a:	6820      	ldr	r0, [r4, #0]
 800600c:	4632      	mov	r2, r6
 800600e:	4641      	mov	r1, r8
 8006010:	f000 faa8 	bl	8006564 <memmove>
 8006014:	68a3      	ldr	r3, [r4, #8]
 8006016:	1b9b      	subs	r3, r3, r6
 8006018:	60a3      	str	r3, [r4, #8]
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	4433      	add	r3, r6
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	2000      	movs	r0, #0
 8006022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006026:	462a      	mov	r2, r5
 8006028:	f000 fad4 	bl	80065d4 <_realloc_r>
 800602c:	4606      	mov	r6, r0
 800602e:	2800      	cmp	r0, #0
 8006030:	d1e0      	bne.n	8005ff4 <__ssputs_r+0x5c>
 8006032:	6921      	ldr	r1, [r4, #16]
 8006034:	4650      	mov	r0, sl
 8006036:	f7ff feb7 	bl	8005da8 <_free_r>
 800603a:	230c      	movs	r3, #12
 800603c:	f8ca 3000 	str.w	r3, [sl]
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006046:	81a3      	strh	r3, [r4, #12]
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	e7e9      	b.n	8006022 <__ssputs_r+0x8a>
	...

08006050 <_svfiprintf_r>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	4698      	mov	r8, r3
 8006056:	898b      	ldrh	r3, [r1, #12]
 8006058:	061b      	lsls	r3, r3, #24
 800605a:	b09d      	sub	sp, #116	@ 0x74
 800605c:	4607      	mov	r7, r0
 800605e:	460d      	mov	r5, r1
 8006060:	4614      	mov	r4, r2
 8006062:	d510      	bpl.n	8006086 <_svfiprintf_r+0x36>
 8006064:	690b      	ldr	r3, [r1, #16]
 8006066:	b973      	cbnz	r3, 8006086 <_svfiprintf_r+0x36>
 8006068:	2140      	movs	r1, #64	@ 0x40
 800606a:	f7ff ff09 	bl	8005e80 <_malloc_r>
 800606e:	6028      	str	r0, [r5, #0]
 8006070:	6128      	str	r0, [r5, #16]
 8006072:	b930      	cbnz	r0, 8006082 <_svfiprintf_r+0x32>
 8006074:	230c      	movs	r3, #12
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	f04f 30ff 	mov.w	r0, #4294967295
 800607c:	b01d      	add	sp, #116	@ 0x74
 800607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006082:	2340      	movs	r3, #64	@ 0x40
 8006084:	616b      	str	r3, [r5, #20]
 8006086:	2300      	movs	r3, #0
 8006088:	9309      	str	r3, [sp, #36]	@ 0x24
 800608a:	2320      	movs	r3, #32
 800608c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006090:	f8cd 800c 	str.w	r8, [sp, #12]
 8006094:	2330      	movs	r3, #48	@ 0x30
 8006096:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006234 <_svfiprintf_r+0x1e4>
 800609a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800609e:	f04f 0901 	mov.w	r9, #1
 80060a2:	4623      	mov	r3, r4
 80060a4:	469a      	mov	sl, r3
 80060a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060aa:	b10a      	cbz	r2, 80060b0 <_svfiprintf_r+0x60>
 80060ac:	2a25      	cmp	r2, #37	@ 0x25
 80060ae:	d1f9      	bne.n	80060a4 <_svfiprintf_r+0x54>
 80060b0:	ebba 0b04 	subs.w	fp, sl, r4
 80060b4:	d00b      	beq.n	80060ce <_svfiprintf_r+0x7e>
 80060b6:	465b      	mov	r3, fp
 80060b8:	4622      	mov	r2, r4
 80060ba:	4629      	mov	r1, r5
 80060bc:	4638      	mov	r0, r7
 80060be:	f7ff ff6b 	bl	8005f98 <__ssputs_r>
 80060c2:	3001      	adds	r0, #1
 80060c4:	f000 80a7 	beq.w	8006216 <_svfiprintf_r+0x1c6>
 80060c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060ca:	445a      	add	r2, fp
 80060cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80060ce:	f89a 3000 	ldrb.w	r3, [sl]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 809f 	beq.w	8006216 <_svfiprintf_r+0x1c6>
 80060d8:	2300      	movs	r3, #0
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e2:	f10a 0a01 	add.w	sl, sl, #1
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	9307      	str	r3, [sp, #28]
 80060ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80060f0:	4654      	mov	r4, sl
 80060f2:	2205      	movs	r2, #5
 80060f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f8:	484e      	ldr	r0, [pc, #312]	@ (8006234 <_svfiprintf_r+0x1e4>)
 80060fa:	f7fa f879 	bl	80001f0 <memchr>
 80060fe:	9a04      	ldr	r2, [sp, #16]
 8006100:	b9d8      	cbnz	r0, 800613a <_svfiprintf_r+0xea>
 8006102:	06d0      	lsls	r0, r2, #27
 8006104:	bf44      	itt	mi
 8006106:	2320      	movmi	r3, #32
 8006108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800610c:	0711      	lsls	r1, r2, #28
 800610e:	bf44      	itt	mi
 8006110:	232b      	movmi	r3, #43	@ 0x2b
 8006112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006116:	f89a 3000 	ldrb.w	r3, [sl]
 800611a:	2b2a      	cmp	r3, #42	@ 0x2a
 800611c:	d015      	beq.n	800614a <_svfiprintf_r+0xfa>
 800611e:	9a07      	ldr	r2, [sp, #28]
 8006120:	4654      	mov	r4, sl
 8006122:	2000      	movs	r0, #0
 8006124:	f04f 0c0a 	mov.w	ip, #10
 8006128:	4621      	mov	r1, r4
 800612a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800612e:	3b30      	subs	r3, #48	@ 0x30
 8006130:	2b09      	cmp	r3, #9
 8006132:	d94b      	bls.n	80061cc <_svfiprintf_r+0x17c>
 8006134:	b1b0      	cbz	r0, 8006164 <_svfiprintf_r+0x114>
 8006136:	9207      	str	r2, [sp, #28]
 8006138:	e014      	b.n	8006164 <_svfiprintf_r+0x114>
 800613a:	eba0 0308 	sub.w	r3, r0, r8
 800613e:	fa09 f303 	lsl.w	r3, r9, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	46a2      	mov	sl, r4
 8006148:	e7d2      	b.n	80060f0 <_svfiprintf_r+0xa0>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	1d19      	adds	r1, r3, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	9103      	str	r1, [sp, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	bfbb      	ittet	lt
 8006156:	425b      	neglt	r3, r3
 8006158:	f042 0202 	orrlt.w	r2, r2, #2
 800615c:	9307      	strge	r3, [sp, #28]
 800615e:	9307      	strlt	r3, [sp, #28]
 8006160:	bfb8      	it	lt
 8006162:	9204      	strlt	r2, [sp, #16]
 8006164:	7823      	ldrb	r3, [r4, #0]
 8006166:	2b2e      	cmp	r3, #46	@ 0x2e
 8006168:	d10a      	bne.n	8006180 <_svfiprintf_r+0x130>
 800616a:	7863      	ldrb	r3, [r4, #1]
 800616c:	2b2a      	cmp	r3, #42	@ 0x2a
 800616e:	d132      	bne.n	80061d6 <_svfiprintf_r+0x186>
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	1d1a      	adds	r2, r3, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	9203      	str	r2, [sp, #12]
 8006178:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800617c:	3402      	adds	r4, #2
 800617e:	9305      	str	r3, [sp, #20]
 8006180:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006244 <_svfiprintf_r+0x1f4>
 8006184:	7821      	ldrb	r1, [r4, #0]
 8006186:	2203      	movs	r2, #3
 8006188:	4650      	mov	r0, sl
 800618a:	f7fa f831 	bl	80001f0 <memchr>
 800618e:	b138      	cbz	r0, 80061a0 <_svfiprintf_r+0x150>
 8006190:	9b04      	ldr	r3, [sp, #16]
 8006192:	eba0 000a 	sub.w	r0, r0, sl
 8006196:	2240      	movs	r2, #64	@ 0x40
 8006198:	4082      	lsls	r2, r0
 800619a:	4313      	orrs	r3, r2
 800619c:	3401      	adds	r4, #1
 800619e:	9304      	str	r3, [sp, #16]
 80061a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a4:	4824      	ldr	r0, [pc, #144]	@ (8006238 <_svfiprintf_r+0x1e8>)
 80061a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061aa:	2206      	movs	r2, #6
 80061ac:	f7fa f820 	bl	80001f0 <memchr>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d036      	beq.n	8006222 <_svfiprintf_r+0x1d2>
 80061b4:	4b21      	ldr	r3, [pc, #132]	@ (800623c <_svfiprintf_r+0x1ec>)
 80061b6:	bb1b      	cbnz	r3, 8006200 <_svfiprintf_r+0x1b0>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	3307      	adds	r3, #7
 80061bc:	f023 0307 	bic.w	r3, r3, #7
 80061c0:	3308      	adds	r3, #8
 80061c2:	9303      	str	r3, [sp, #12]
 80061c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c6:	4433      	add	r3, r6
 80061c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ca:	e76a      	b.n	80060a2 <_svfiprintf_r+0x52>
 80061cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d0:	460c      	mov	r4, r1
 80061d2:	2001      	movs	r0, #1
 80061d4:	e7a8      	b.n	8006128 <_svfiprintf_r+0xd8>
 80061d6:	2300      	movs	r3, #0
 80061d8:	3401      	adds	r4, #1
 80061da:	9305      	str	r3, [sp, #20]
 80061dc:	4619      	mov	r1, r3
 80061de:	f04f 0c0a 	mov.w	ip, #10
 80061e2:	4620      	mov	r0, r4
 80061e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061e8:	3a30      	subs	r2, #48	@ 0x30
 80061ea:	2a09      	cmp	r2, #9
 80061ec:	d903      	bls.n	80061f6 <_svfiprintf_r+0x1a6>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0c6      	beq.n	8006180 <_svfiprintf_r+0x130>
 80061f2:	9105      	str	r1, [sp, #20]
 80061f4:	e7c4      	b.n	8006180 <_svfiprintf_r+0x130>
 80061f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061fa:	4604      	mov	r4, r0
 80061fc:	2301      	movs	r3, #1
 80061fe:	e7f0      	b.n	80061e2 <_svfiprintf_r+0x192>
 8006200:	ab03      	add	r3, sp, #12
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	462a      	mov	r2, r5
 8006206:	4b0e      	ldr	r3, [pc, #56]	@ (8006240 <_svfiprintf_r+0x1f0>)
 8006208:	a904      	add	r1, sp, #16
 800620a:	4638      	mov	r0, r7
 800620c:	f3af 8000 	nop.w
 8006210:	1c42      	adds	r2, r0, #1
 8006212:	4606      	mov	r6, r0
 8006214:	d1d6      	bne.n	80061c4 <_svfiprintf_r+0x174>
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	065b      	lsls	r3, r3, #25
 800621a:	f53f af2d 	bmi.w	8006078 <_svfiprintf_r+0x28>
 800621e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006220:	e72c      	b.n	800607c <_svfiprintf_r+0x2c>
 8006222:	ab03      	add	r3, sp, #12
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	462a      	mov	r2, r5
 8006228:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <_svfiprintf_r+0x1f0>)
 800622a:	a904      	add	r1, sp, #16
 800622c:	4638      	mov	r0, r7
 800622e:	f000 f879 	bl	8006324 <_printf_i>
 8006232:	e7ed      	b.n	8006210 <_svfiprintf_r+0x1c0>
 8006234:	08006ad9 	.word	0x08006ad9
 8006238:	08006ae3 	.word	0x08006ae3
 800623c:	00000000 	.word	0x00000000
 8006240:	08005f99 	.word	0x08005f99
 8006244:	08006adf 	.word	0x08006adf

08006248 <_printf_common>:
 8006248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	4616      	mov	r6, r2
 800624e:	4698      	mov	r8, r3
 8006250:	688a      	ldr	r2, [r1, #8]
 8006252:	690b      	ldr	r3, [r1, #16]
 8006254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006258:	4293      	cmp	r3, r2
 800625a:	bfb8      	it	lt
 800625c:	4613      	movlt	r3, r2
 800625e:	6033      	str	r3, [r6, #0]
 8006260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006264:	4607      	mov	r7, r0
 8006266:	460c      	mov	r4, r1
 8006268:	b10a      	cbz	r2, 800626e <_printf_common+0x26>
 800626a:	3301      	adds	r3, #1
 800626c:	6033      	str	r3, [r6, #0]
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	0699      	lsls	r1, r3, #26
 8006272:	bf42      	ittt	mi
 8006274:	6833      	ldrmi	r3, [r6, #0]
 8006276:	3302      	addmi	r3, #2
 8006278:	6033      	strmi	r3, [r6, #0]
 800627a:	6825      	ldr	r5, [r4, #0]
 800627c:	f015 0506 	ands.w	r5, r5, #6
 8006280:	d106      	bne.n	8006290 <_printf_common+0x48>
 8006282:	f104 0a19 	add.w	sl, r4, #25
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	6832      	ldr	r2, [r6, #0]
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	42ab      	cmp	r3, r5
 800628e:	dc26      	bgt.n	80062de <_printf_common+0x96>
 8006290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	3b00      	subs	r3, #0
 8006298:	bf18      	it	ne
 800629a:	2301      	movne	r3, #1
 800629c:	0692      	lsls	r2, r2, #26
 800629e:	d42b      	bmi.n	80062f8 <_printf_common+0xb0>
 80062a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062a4:	4641      	mov	r1, r8
 80062a6:	4638      	mov	r0, r7
 80062a8:	47c8      	blx	r9
 80062aa:	3001      	adds	r0, #1
 80062ac:	d01e      	beq.n	80062ec <_printf_common+0xa4>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	6922      	ldr	r2, [r4, #16]
 80062b2:	f003 0306 	and.w	r3, r3, #6
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	bf02      	ittt	eq
 80062ba:	68e5      	ldreq	r5, [r4, #12]
 80062bc:	6833      	ldreq	r3, [r6, #0]
 80062be:	1aed      	subeq	r5, r5, r3
 80062c0:	68a3      	ldr	r3, [r4, #8]
 80062c2:	bf0c      	ite	eq
 80062c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062c8:	2500      	movne	r5, #0
 80062ca:	4293      	cmp	r3, r2
 80062cc:	bfc4      	itt	gt
 80062ce:	1a9b      	subgt	r3, r3, r2
 80062d0:	18ed      	addgt	r5, r5, r3
 80062d2:	2600      	movs	r6, #0
 80062d4:	341a      	adds	r4, #26
 80062d6:	42b5      	cmp	r5, r6
 80062d8:	d11a      	bne.n	8006310 <_printf_common+0xc8>
 80062da:	2000      	movs	r0, #0
 80062dc:	e008      	b.n	80062f0 <_printf_common+0xa8>
 80062de:	2301      	movs	r3, #1
 80062e0:	4652      	mov	r2, sl
 80062e2:	4641      	mov	r1, r8
 80062e4:	4638      	mov	r0, r7
 80062e6:	47c8      	blx	r9
 80062e8:	3001      	adds	r0, #1
 80062ea:	d103      	bne.n	80062f4 <_printf_common+0xac>
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295
 80062f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f4:	3501      	adds	r5, #1
 80062f6:	e7c6      	b.n	8006286 <_printf_common+0x3e>
 80062f8:	18e1      	adds	r1, r4, r3
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	2030      	movs	r0, #48	@ 0x30
 80062fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006302:	4422      	add	r2, r4
 8006304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800630c:	3302      	adds	r3, #2
 800630e:	e7c7      	b.n	80062a0 <_printf_common+0x58>
 8006310:	2301      	movs	r3, #1
 8006312:	4622      	mov	r2, r4
 8006314:	4641      	mov	r1, r8
 8006316:	4638      	mov	r0, r7
 8006318:	47c8      	blx	r9
 800631a:	3001      	adds	r0, #1
 800631c:	d0e6      	beq.n	80062ec <_printf_common+0xa4>
 800631e:	3601      	adds	r6, #1
 8006320:	e7d9      	b.n	80062d6 <_printf_common+0x8e>
	...

08006324 <_printf_i>:
 8006324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006328:	7e0f      	ldrb	r7, [r1, #24]
 800632a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800632c:	2f78      	cmp	r7, #120	@ 0x78
 800632e:	4691      	mov	r9, r2
 8006330:	4680      	mov	r8, r0
 8006332:	460c      	mov	r4, r1
 8006334:	469a      	mov	sl, r3
 8006336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800633a:	d807      	bhi.n	800634c <_printf_i+0x28>
 800633c:	2f62      	cmp	r7, #98	@ 0x62
 800633e:	d80a      	bhi.n	8006356 <_printf_i+0x32>
 8006340:	2f00      	cmp	r7, #0
 8006342:	f000 80d2 	beq.w	80064ea <_printf_i+0x1c6>
 8006346:	2f58      	cmp	r7, #88	@ 0x58
 8006348:	f000 80b9 	beq.w	80064be <_printf_i+0x19a>
 800634c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006354:	e03a      	b.n	80063cc <_printf_i+0xa8>
 8006356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800635a:	2b15      	cmp	r3, #21
 800635c:	d8f6      	bhi.n	800634c <_printf_i+0x28>
 800635e:	a101      	add	r1, pc, #4	@ (adr r1, 8006364 <_printf_i+0x40>)
 8006360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006364:	080063bd 	.word	0x080063bd
 8006368:	080063d1 	.word	0x080063d1
 800636c:	0800634d 	.word	0x0800634d
 8006370:	0800634d 	.word	0x0800634d
 8006374:	0800634d 	.word	0x0800634d
 8006378:	0800634d 	.word	0x0800634d
 800637c:	080063d1 	.word	0x080063d1
 8006380:	0800634d 	.word	0x0800634d
 8006384:	0800634d 	.word	0x0800634d
 8006388:	0800634d 	.word	0x0800634d
 800638c:	0800634d 	.word	0x0800634d
 8006390:	080064d1 	.word	0x080064d1
 8006394:	080063fb 	.word	0x080063fb
 8006398:	0800648b 	.word	0x0800648b
 800639c:	0800634d 	.word	0x0800634d
 80063a0:	0800634d 	.word	0x0800634d
 80063a4:	080064f3 	.word	0x080064f3
 80063a8:	0800634d 	.word	0x0800634d
 80063ac:	080063fb 	.word	0x080063fb
 80063b0:	0800634d 	.word	0x0800634d
 80063b4:	0800634d 	.word	0x0800634d
 80063b8:	08006493 	.word	0x08006493
 80063bc:	6833      	ldr	r3, [r6, #0]
 80063be:	1d1a      	adds	r2, r3, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6032      	str	r2, [r6, #0]
 80063c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063cc:	2301      	movs	r3, #1
 80063ce:	e09d      	b.n	800650c <_printf_i+0x1e8>
 80063d0:	6833      	ldr	r3, [r6, #0]
 80063d2:	6820      	ldr	r0, [r4, #0]
 80063d4:	1d19      	adds	r1, r3, #4
 80063d6:	6031      	str	r1, [r6, #0]
 80063d8:	0606      	lsls	r6, r0, #24
 80063da:	d501      	bpl.n	80063e0 <_printf_i+0xbc>
 80063dc:	681d      	ldr	r5, [r3, #0]
 80063de:	e003      	b.n	80063e8 <_printf_i+0xc4>
 80063e0:	0645      	lsls	r5, r0, #25
 80063e2:	d5fb      	bpl.n	80063dc <_printf_i+0xb8>
 80063e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	da03      	bge.n	80063f4 <_printf_i+0xd0>
 80063ec:	232d      	movs	r3, #45	@ 0x2d
 80063ee:	426d      	negs	r5, r5
 80063f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063f4:	4859      	ldr	r0, [pc, #356]	@ (800655c <_printf_i+0x238>)
 80063f6:	230a      	movs	r3, #10
 80063f8:	e011      	b.n	800641e <_printf_i+0xfa>
 80063fa:	6821      	ldr	r1, [r4, #0]
 80063fc:	6833      	ldr	r3, [r6, #0]
 80063fe:	0608      	lsls	r0, r1, #24
 8006400:	f853 5b04 	ldr.w	r5, [r3], #4
 8006404:	d402      	bmi.n	800640c <_printf_i+0xe8>
 8006406:	0649      	lsls	r1, r1, #25
 8006408:	bf48      	it	mi
 800640a:	b2ad      	uxthmi	r5, r5
 800640c:	2f6f      	cmp	r7, #111	@ 0x6f
 800640e:	4853      	ldr	r0, [pc, #332]	@ (800655c <_printf_i+0x238>)
 8006410:	6033      	str	r3, [r6, #0]
 8006412:	bf14      	ite	ne
 8006414:	230a      	movne	r3, #10
 8006416:	2308      	moveq	r3, #8
 8006418:	2100      	movs	r1, #0
 800641a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800641e:	6866      	ldr	r6, [r4, #4]
 8006420:	60a6      	str	r6, [r4, #8]
 8006422:	2e00      	cmp	r6, #0
 8006424:	bfa2      	ittt	ge
 8006426:	6821      	ldrge	r1, [r4, #0]
 8006428:	f021 0104 	bicge.w	r1, r1, #4
 800642c:	6021      	strge	r1, [r4, #0]
 800642e:	b90d      	cbnz	r5, 8006434 <_printf_i+0x110>
 8006430:	2e00      	cmp	r6, #0
 8006432:	d04b      	beq.n	80064cc <_printf_i+0x1a8>
 8006434:	4616      	mov	r6, r2
 8006436:	fbb5 f1f3 	udiv	r1, r5, r3
 800643a:	fb03 5711 	mls	r7, r3, r1, r5
 800643e:	5dc7      	ldrb	r7, [r0, r7]
 8006440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006444:	462f      	mov	r7, r5
 8006446:	42bb      	cmp	r3, r7
 8006448:	460d      	mov	r5, r1
 800644a:	d9f4      	bls.n	8006436 <_printf_i+0x112>
 800644c:	2b08      	cmp	r3, #8
 800644e:	d10b      	bne.n	8006468 <_printf_i+0x144>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	07df      	lsls	r7, r3, #31
 8006454:	d508      	bpl.n	8006468 <_printf_i+0x144>
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	6861      	ldr	r1, [r4, #4]
 800645a:	4299      	cmp	r1, r3
 800645c:	bfde      	ittt	le
 800645e:	2330      	movle	r3, #48	@ 0x30
 8006460:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006464:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006468:	1b92      	subs	r2, r2, r6
 800646a:	6122      	str	r2, [r4, #16]
 800646c:	f8cd a000 	str.w	sl, [sp]
 8006470:	464b      	mov	r3, r9
 8006472:	aa03      	add	r2, sp, #12
 8006474:	4621      	mov	r1, r4
 8006476:	4640      	mov	r0, r8
 8006478:	f7ff fee6 	bl	8006248 <_printf_common>
 800647c:	3001      	adds	r0, #1
 800647e:	d14a      	bne.n	8006516 <_printf_i+0x1f2>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	b004      	add	sp, #16
 8006486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	f043 0320 	orr.w	r3, r3, #32
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	4833      	ldr	r0, [pc, #204]	@ (8006560 <_printf_i+0x23c>)
 8006494:	2778      	movs	r7, #120	@ 0x78
 8006496:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	6831      	ldr	r1, [r6, #0]
 800649e:	061f      	lsls	r7, r3, #24
 80064a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80064a4:	d402      	bmi.n	80064ac <_printf_i+0x188>
 80064a6:	065f      	lsls	r7, r3, #25
 80064a8:	bf48      	it	mi
 80064aa:	b2ad      	uxthmi	r5, r5
 80064ac:	6031      	str	r1, [r6, #0]
 80064ae:	07d9      	lsls	r1, r3, #31
 80064b0:	bf44      	itt	mi
 80064b2:	f043 0320 	orrmi.w	r3, r3, #32
 80064b6:	6023      	strmi	r3, [r4, #0]
 80064b8:	b11d      	cbz	r5, 80064c2 <_printf_i+0x19e>
 80064ba:	2310      	movs	r3, #16
 80064bc:	e7ac      	b.n	8006418 <_printf_i+0xf4>
 80064be:	4827      	ldr	r0, [pc, #156]	@ (800655c <_printf_i+0x238>)
 80064c0:	e7e9      	b.n	8006496 <_printf_i+0x172>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	f023 0320 	bic.w	r3, r3, #32
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	e7f6      	b.n	80064ba <_printf_i+0x196>
 80064cc:	4616      	mov	r6, r2
 80064ce:	e7bd      	b.n	800644c <_printf_i+0x128>
 80064d0:	6833      	ldr	r3, [r6, #0]
 80064d2:	6825      	ldr	r5, [r4, #0]
 80064d4:	6961      	ldr	r1, [r4, #20]
 80064d6:	1d18      	adds	r0, r3, #4
 80064d8:	6030      	str	r0, [r6, #0]
 80064da:	062e      	lsls	r6, r5, #24
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	d501      	bpl.n	80064e4 <_printf_i+0x1c0>
 80064e0:	6019      	str	r1, [r3, #0]
 80064e2:	e002      	b.n	80064ea <_printf_i+0x1c6>
 80064e4:	0668      	lsls	r0, r5, #25
 80064e6:	d5fb      	bpl.n	80064e0 <_printf_i+0x1bc>
 80064e8:	8019      	strh	r1, [r3, #0]
 80064ea:	2300      	movs	r3, #0
 80064ec:	6123      	str	r3, [r4, #16]
 80064ee:	4616      	mov	r6, r2
 80064f0:	e7bc      	b.n	800646c <_printf_i+0x148>
 80064f2:	6833      	ldr	r3, [r6, #0]
 80064f4:	1d1a      	adds	r2, r3, #4
 80064f6:	6032      	str	r2, [r6, #0]
 80064f8:	681e      	ldr	r6, [r3, #0]
 80064fa:	6862      	ldr	r2, [r4, #4]
 80064fc:	2100      	movs	r1, #0
 80064fe:	4630      	mov	r0, r6
 8006500:	f7f9 fe76 	bl	80001f0 <memchr>
 8006504:	b108      	cbz	r0, 800650a <_printf_i+0x1e6>
 8006506:	1b80      	subs	r0, r0, r6
 8006508:	6060      	str	r0, [r4, #4]
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	6123      	str	r3, [r4, #16]
 800650e:	2300      	movs	r3, #0
 8006510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006514:	e7aa      	b.n	800646c <_printf_i+0x148>
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	4632      	mov	r2, r6
 800651a:	4649      	mov	r1, r9
 800651c:	4640      	mov	r0, r8
 800651e:	47d0      	blx	sl
 8006520:	3001      	adds	r0, #1
 8006522:	d0ad      	beq.n	8006480 <_printf_i+0x15c>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	079b      	lsls	r3, r3, #30
 8006528:	d413      	bmi.n	8006552 <_printf_i+0x22e>
 800652a:	68e0      	ldr	r0, [r4, #12]
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	4298      	cmp	r0, r3
 8006530:	bfb8      	it	lt
 8006532:	4618      	movlt	r0, r3
 8006534:	e7a6      	b.n	8006484 <_printf_i+0x160>
 8006536:	2301      	movs	r3, #1
 8006538:	4632      	mov	r2, r6
 800653a:	4649      	mov	r1, r9
 800653c:	4640      	mov	r0, r8
 800653e:	47d0      	blx	sl
 8006540:	3001      	adds	r0, #1
 8006542:	d09d      	beq.n	8006480 <_printf_i+0x15c>
 8006544:	3501      	adds	r5, #1
 8006546:	68e3      	ldr	r3, [r4, #12]
 8006548:	9903      	ldr	r1, [sp, #12]
 800654a:	1a5b      	subs	r3, r3, r1
 800654c:	42ab      	cmp	r3, r5
 800654e:	dcf2      	bgt.n	8006536 <_printf_i+0x212>
 8006550:	e7eb      	b.n	800652a <_printf_i+0x206>
 8006552:	2500      	movs	r5, #0
 8006554:	f104 0619 	add.w	r6, r4, #25
 8006558:	e7f5      	b.n	8006546 <_printf_i+0x222>
 800655a:	bf00      	nop
 800655c:	08006aea 	.word	0x08006aea
 8006560:	08006afb 	.word	0x08006afb

08006564 <memmove>:
 8006564:	4288      	cmp	r0, r1
 8006566:	b510      	push	{r4, lr}
 8006568:	eb01 0402 	add.w	r4, r1, r2
 800656c:	d902      	bls.n	8006574 <memmove+0x10>
 800656e:	4284      	cmp	r4, r0
 8006570:	4623      	mov	r3, r4
 8006572:	d807      	bhi.n	8006584 <memmove+0x20>
 8006574:	1e43      	subs	r3, r0, #1
 8006576:	42a1      	cmp	r1, r4
 8006578:	d008      	beq.n	800658c <memmove+0x28>
 800657a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800657e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006582:	e7f8      	b.n	8006576 <memmove+0x12>
 8006584:	4402      	add	r2, r0
 8006586:	4601      	mov	r1, r0
 8006588:	428a      	cmp	r2, r1
 800658a:	d100      	bne.n	800658e <memmove+0x2a>
 800658c:	bd10      	pop	{r4, pc}
 800658e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006596:	e7f7      	b.n	8006588 <memmove+0x24>

08006598 <_sbrk_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d06      	ldr	r5, [pc, #24]	@ (80065b4 <_sbrk_r+0x1c>)
 800659c:	2300      	movs	r3, #0
 800659e:	4604      	mov	r4, r0
 80065a0:	4608      	mov	r0, r1
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	f7fb fddc 	bl	8002160 <_sbrk>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_sbrk_r+0x1a>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_sbrk_r+0x1a>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	20000430 	.word	0x20000430

080065b8 <memcpy>:
 80065b8:	440a      	add	r2, r1
 80065ba:	4291      	cmp	r1, r2
 80065bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80065c0:	d100      	bne.n	80065c4 <memcpy+0xc>
 80065c2:	4770      	bx	lr
 80065c4:	b510      	push	{r4, lr}
 80065c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ce:	4291      	cmp	r1, r2
 80065d0:	d1f9      	bne.n	80065c6 <memcpy+0xe>
 80065d2:	bd10      	pop	{r4, pc}

080065d4 <_realloc_r>:
 80065d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d8:	4680      	mov	r8, r0
 80065da:	4615      	mov	r5, r2
 80065dc:	460c      	mov	r4, r1
 80065de:	b921      	cbnz	r1, 80065ea <_realloc_r+0x16>
 80065e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065e4:	4611      	mov	r1, r2
 80065e6:	f7ff bc4b 	b.w	8005e80 <_malloc_r>
 80065ea:	b92a      	cbnz	r2, 80065f8 <_realloc_r+0x24>
 80065ec:	f7ff fbdc 	bl	8005da8 <_free_r>
 80065f0:	2400      	movs	r4, #0
 80065f2:	4620      	mov	r0, r4
 80065f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f8:	f000 f81a 	bl	8006630 <_malloc_usable_size_r>
 80065fc:	4285      	cmp	r5, r0
 80065fe:	4606      	mov	r6, r0
 8006600:	d802      	bhi.n	8006608 <_realloc_r+0x34>
 8006602:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006606:	d8f4      	bhi.n	80065f2 <_realloc_r+0x1e>
 8006608:	4629      	mov	r1, r5
 800660a:	4640      	mov	r0, r8
 800660c:	f7ff fc38 	bl	8005e80 <_malloc_r>
 8006610:	4607      	mov	r7, r0
 8006612:	2800      	cmp	r0, #0
 8006614:	d0ec      	beq.n	80065f0 <_realloc_r+0x1c>
 8006616:	42b5      	cmp	r5, r6
 8006618:	462a      	mov	r2, r5
 800661a:	4621      	mov	r1, r4
 800661c:	bf28      	it	cs
 800661e:	4632      	movcs	r2, r6
 8006620:	f7ff ffca 	bl	80065b8 <memcpy>
 8006624:	4621      	mov	r1, r4
 8006626:	4640      	mov	r0, r8
 8006628:	f7ff fbbe 	bl	8005da8 <_free_r>
 800662c:	463c      	mov	r4, r7
 800662e:	e7e0      	b.n	80065f2 <_realloc_r+0x1e>

08006630 <_malloc_usable_size_r>:
 8006630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006634:	1f18      	subs	r0, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	bfbc      	itt	lt
 800663a:	580b      	ldrlt	r3, [r1, r0]
 800663c:	18c0      	addlt	r0, r0, r3
 800663e:	4770      	bx	lr

08006640 <_init>:
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	bf00      	nop
 8006644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006646:	bc08      	pop	{r3}
 8006648:	469e      	mov	lr, r3
 800664a:	4770      	bx	lr

0800664c <_fini>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr
